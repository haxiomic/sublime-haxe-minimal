# Generated by Haxe 4.0.0-preview.4
# coding: utf-8

from sublime_plugin import WindowCommand as _HaxeBuildCommand_VariantsWindowCommand
from sublime_plugin import ViewEventListener as sublime_plugin_ViewEventListener
import math as python_lib_Math
import math as Math
from os import path as python_lib_os_Path
import inspect as python_lib_Inspect
import os as python_lib_Os
import builtins as python_lib_Builtins
import functools as python_lib_Functools
try:
    import msvcrt as python_lib_Msvcrt
except:
    pass
from queue import Queue as python_lib_Queue
from queue import Empty as python_lib_Empty
import random as python_lib_Random
import re as python_lib_Re
import subprocess as python_lib_Subprocess
import sys as python_lib_Sys
try:
    import termios as python_lib_Termios
except:
    pass
import time as python_lib_Time
import timeit as python_lib_Timeit
try:
    import tty as python_lib_Tty
except:
    pass
from io import StringIO as python_lib_io_StringIO
from subprocess import Popen as python_lib_subprocess_Popen
from threading import Lock as python_lib_threading_Lock
from threading import Thread as python_lib_threading_Thread
from sublime import Region as sublime_Region
import sublime as sublime_Sublime


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields
    def __repr__(self):
        return repr(self.__dict__)


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")

Enum._hx_class = Enum


class EReg:
    _hx_class_name = "EReg"
    __slots__ = ("pattern", "_hx_global")
    _hx_fields = ["pattern", "global"]
    _hx_methods = ["replace"]

    def __init__(self,r,opt):
        self._hx_global = False
        options = 0
        _g = 0
        _g1 = len(opt)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = (-1 if ((i >= len(opt))) else ord(opt[i]))
            if (c == 109):
                options = (options | python_lib_Re.M)
            if (c == 105):
                options = (options | python_lib_Re.I)
            if (c == 115):
                options = (options | python_lib_Re.S)
            if (c == 117):
                options = (options | python_lib_Re.U)
            if (c == 103):
                self._hx_global = True
        self.pattern = python_lib_Re.compile(r,options)

    def replace(self,s,by):
        _this = by.split("$$")
        by1 = "_hx_#repl#__".join([python_Boot.toString1(x1,'') for x1 in _this])
        def _hx_local_0(x):
            res = by1
            g = x.groups()
            _g = 0
            _g1 = len(g)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                gs = g[i]
                if (gs is None):
                    continue
                delimiter = ("$" + HxOverrides.stringOrNull(str((i + 1))))
                _this1 = (list(res) if ((delimiter == "")) else res.split(delimiter))
                res = gs.join([python_Boot.toString1(x1,'') for x1 in _this1])
            _this2 = res.split("_hx_#repl#__")
            res = "$".join([python_Boot.toString1(x1,'') for x1 in _this2])
            return res
        replace = _hx_local_0
        return python_lib_Re.sub(self.pattern,replace,s,(0 if (self._hx_global) else 1))

EReg._hx_class = EReg


class HaxeBuildCommand(_HaxeBuildCommand_VariantsWindowCommand):
    _hx_class_name = "HaxeBuildCommand"
    __slots__ = ("panel", "panelLock", "buildHandle")
    _hx_fields = ["panel", "panelLock", "buildHandle"]
    _hx_methods = ["is_enabled", "is_visible", "run", "description", "clearBuildStatus", "setBuildStatus", "clearResultsPanel", "appendPanel", "showResultsPanel", "hideResultsPanel"]
    _hx_statics = []
    _hx_super = _HaxeBuildCommand_VariantsWindowCommand


    def __init__(self,window):
        self.panel = None
        self.buildHandle = None
        self.panelLock = python_lib_threading_Lock()
        super().__init__(window)

    def is_enabled(self,args = None):
        if ((args is not None) and ((args.get("kill") == True))):
            return False
        if ((args is not None) and ((args.get("run_after_build") == True))):
            return False
        return True

    def is_visible(self,args = None):
        return self.is_enabled(args)

    def run(self,args = None,run_after_build = False):
        if (run_after_build is None):
            run_after_build = False
        _gthis = self
        if ((args is not None) and ((args.get("kill") == True))):
            haxe_Log.trace("@! todo: implement cancel build",_hx_AnonObject({'fileName': "src/HaxeBuildCommand.hx", 'lineNumber': 33, 'className': "HaxeBuildCommand", 'methodName': "run"}))
            return
        view = self.window.active_view()
        self.clearBuildStatus(view)
        self.clearResultsPanel()
        hxmlContent = None
        _g = view.settings().get("syntax")
        if (_g == "Packages/Haxe Minimal/syntax/haxe.tmLanguage"):
            hxmlContent = HaxeProject.getHxmlForView(view)
        elif (_g == "Packages/Haxe Minimal/syntax/hxml.tmLanguage"):
            hxmlPath = view.file_name()
            if (hxmlPath is None):
                self.appendPanel("Could not build because the file hasn't been saved")
                self.showResultsPanel()
                return
            hxmlContent = ((("--cwd \"" + HxOverrides.stringOrNull(haxe_io_Path.directory(hxmlPath))) + "\"\n") + HxOverrides.stringOrNull(sys_io_File.getContent(hxmlPath)))
        else:
            pass
        if (hxmlContent is None):
            self.appendPanel("A hxml file to build this file could not be found")
            self.showResultsPanel()
            return
        self.appendPanel("Build in progress\n")
        haxeServer = None
        if (HaxeProject.haxeServerStdioHandle is None):
            HaxeProject.haxeServerStdioHandle = HaxeServerStdio()
        haxeServer = HaxeProject.haxeServerStdioHandle
        def _hx_local_0(result):
            if (not result.hasError):
                _gthis.appendPanel("\nBuild complete\n")
                _gthis.showResultsPanel()
            else:
                _gthis.appendPanel("\nBuild failed\n")
                _gthis.showResultsPanel()
            if (len(result.log) > 0):
                _gthis.appendPanel("\n")
                _this = result.log
                tmp = "\n".join([python_Boot.toString1(x1,'') for x1 in _this])
                _gthis.appendPanel(tmp)
                _gthis.showResultsPanel()
            if (len(result.message) > 0):
                _gthis.appendPanel("\n")
                _gthis.appendPanel(result.message)
                _gthis.showResultsPanel()
            _gthis.buildHandle = None
        self.buildHandle = haxeServer.buildAsync(hxmlContent,_hx_local_0)

    def description(self,args = None):
        if ((args is not None) and ((args.get("kill") == True))):
            return "Cancels haxe compilation if in progress"
        return "Compiles haxe code"

    def clearBuildStatus(self,view):
        view.erase_status("haxe_build_status")

    def setBuildStatus(self,view,text):
        view.set_status("haxe_build_status",text)

    def clearResultsPanel(self):
        self.panelLock.acquire()
        self.panel = self.window.create_output_panel("exec")
        args = dict()
        self.panel.run_command("append",args)
        self.panelLock.release()

    def appendPanel(self,text):
        self.panelLock.acquire()
        if (self.panel is None):
            self.panel = self.window.create_output_panel("exec")
        args = dict()
        args["characters"] = text
        self.panel.run_command("append",args)
        self.panelLock.release()

    def showResultsPanel(self):
        self.panelLock.acquire()
        args = dict()
        args["panel"] = "output.exec"
        self.window.run_command("show_panel",args)
        self.panelLock.release()

    def hideResultsPanel(self):
        self.panelLock.acquire()
        args = dict()
        args["panel"] = "output.exec"
        self.window.run_command("hide_panel",args)
        self.panelLock.release()

HaxeBuildCommand._hx_class = HaxeBuildCommand


class HaxePlugin:
    _hx_class_name = "HaxePlugin"
    __slots__ = ()
    _hx_statics = ["id", "main"]

    @staticmethod
    def main():
        def _hx_local_0(v,infos = None):
            _hx_str = Std.string(v)
            prefix = ""
            suffix = ""
            if (infos is not None):
                prefix = (((("" + HxOverrides.stringOrNull(infos.fileName)) + ":") + Std.string(infos.lineNumber)) + ": ")
                if (Reflect.field(infos,"customParams") is not None):
                    _this = Reflect.field(infos,"customParams")
                    suffix = (", " + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in _this])))
                else:
                    suffix = ""
            python_lib_Builtins.print(((("null" if prefix is None else prefix) + ("null" if _hx_str is None else _hx_str)) + ("null" if suffix is None else suffix)))
        haxe_Log.trace = _hx_local_0
HaxePlugin._hx_class = HaxePlugin


class HaxeProject:
    _hx_class_name = "HaxeProject"
    __slots__ = ()
    _hx_statics = ["haxeServerStdioHandle", "haxeServerSocketHandle", "getHaxeServerHandle", "terminateHaxeServers", "getHxmlForView", "generateHxmlForView", "findAssociatedHxmlPath", "validateHxmlForView"]

    @staticmethod
    def getHaxeServerHandle(view,mode):
        if (mode == 0):
            if (HaxeProject.haxeServerStdioHandle is None):
                HaxeProject.haxeServerStdioHandle = HaxeServerStdio()
            return HaxeProject.haxeServerStdioHandle
        else:
            raise _HxException("Not yet supported")

    @staticmethod
    def terminateHaxeServers():
        if (HaxeProject.haxeServerStdioHandle is not None):
            HaxeProject.haxeServerStdioHandle.terminate()
            HaxeProject.haxeServerStdioHandle = None
        if (HaxeProject.haxeServerSocketHandle is not None):
            HaxeProject.haxeServerSocketHandle.terminate()
            HaxeProject.haxeServerSocketHandle = None

    @staticmethod
    def getHxmlForView(view):
        hxmlPath = HaxeProject.findAssociatedHxmlPath(view)
        if (hxmlPath is not None):
            return ((("--cwd \"" + HxOverrides.stringOrNull(haxe_io_Path.directory(hxmlPath))) + "\"\n") + HxOverrides.stringOrNull(sys_io_File.getContent(hxmlPath)))
        return HaxeProject.generateHxmlForView(view)

    @staticmethod
    def generateHxmlForView(view):
        hxml = "\n--no-output"
        if (view.file_name() is not None):
            hxml = ("\n--no-output" + HxOverrides.stringOrNull((("\n--cwd " + HxOverrides.stringOrNull(haxe_io_Path.directory(view.file_name()))))))
            hxml = (("null" if hxml is None else hxml) + HxOverrides.stringOrNull((("\n" + HxOverrides.stringOrNull(haxe_io_Path.withoutDirectory(view.file_name()))))))
        return hxml

    @staticmethod
    def findAssociatedHxmlPath(view):
        if (view.file_name() is not None):
            searchDir = haxe_io_Path.directory(view.file_name())
            _g = 0
            while (_g < 5):
                _g = (_g + 1)
                if (searchDir == ""):
                    break
                files = sys_FileSystem.readDirectory(searchDir)
                _g1 = 0
                while (_g1 < len(files)):
                    f = (files[_g1] if _g1 >= 0 and _g1 < len(files) else None)
                    _g1 = (_g1 + 1)
                    if (haxe_io_Path.extension(f).lower() == "hxml"):
                        hxmlPath = haxe_io_Path.join([searchDir, f])
                        if HaxeProject.validateHxmlForView(view,hxmlPath):
                            return hxmlPath
                parentSearchDir = haxe_io_Path.directory(searchDir)
                if (parentSearchDir == searchDir):
                    return None
                searchDir = parentSearchDir
        return None

    @staticmethod
    def validateHxmlForView(view,hxmlPath):
        return True
HaxeProject._hx_class = HaxeProject


class HaxeServer:
    _hx_class_name = "HaxeServer"
    __slots__ = ()
    _hx_methods = ["restart", "terminate", "buildAsync"]
HaxeServer._hx_class = HaxeServer


class HaxeServerStdio:
    _hx_class_name = "HaxeServerStdio"
    __slots__ = ("processUserArgs", "process", "processWriteLock", "errQueue")
    _hx_fields = ["processUserArgs", "process", "processWriteLock", "errQueue"]
    _hx_methods = ["__del__", "start", "restart", "terminate", "buildAsync", "display", "build", "execute"]
    _hx_statics = ["parseCompilerOutput", "createServerMessageQueue"]

    def __init__(self,args = None):
        self.errQueue = None
        self.process = None
        self.processWriteLock = python_lib_threading_Lock()
        self.processUserArgs = list()
        if (args is not None):
            self.processUserArgs = args
        self.start(self.processUserArgs)

    def __del__(self):
        self.terminate()

    def start(self,args):
        sys = python_lib_Sys
        moduleNames = Reflect.field(sys,"builtin_module_names")
        isPosix = (python_internal_ArrayImpl.indexOf(list(moduleNames),"posix",None) != -1)
        haxe_Log.trace("Starting haxe server",_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 81, 'className': "HaxeServerStdio", 'methodName': "start"}))
        args1 = (["haxe", "--wait", "stdio"] + args)
        o = _hx_AnonObject({'stdout': python_lib_Subprocess.PIPE, 'stderr': python_lib_Subprocess.PIPE, 'stdin': python_lib_Subprocess.PIPE, 'close_fds': isPosix})
        Reflect.setField(o,"bufsize",(Reflect.field(o,"bufsize") if (hasattr(o,(("_hx_" + "bufsize") if (("bufsize" in python_Boot.keywords)) else (("_hx_" + "bufsize") if (((((len("bufsize") > 2) and ((ord("bufsize"[0]) == 95))) and ((ord("bufsize"[1]) == 95))) and ((ord("bufsize"[(len("bufsize") - 1)]) != 95)))) else "bufsize")))) else 0))
        Reflect.setField(o,"executable",(Reflect.field(o,"executable") if (hasattr(o,(("_hx_" + "executable") if (("executable" in python_Boot.keywords)) else (("_hx_" + "executable") if (((((len("executable") > 2) and ((ord("executable"[0]) == 95))) and ((ord("executable"[1]) == 95))) and ((ord("executable"[(len("executable") - 1)]) != 95)))) else "executable")))) else None))
        Reflect.setField(o,"stdin",(Reflect.field(o,"stdin") if (hasattr(o,(("_hx_" + "stdin") if (("stdin" in python_Boot.keywords)) else (("_hx_" + "stdin") if (((((len("stdin") > 2) and ((ord("stdin"[0]) == 95))) and ((ord("stdin"[1]) == 95))) and ((ord("stdin"[(len("stdin") - 1)]) != 95)))) else "stdin")))) else None))
        Reflect.setField(o,"stdout",(Reflect.field(o,"stdout") if (hasattr(o,(("_hx_" + "stdout") if (("stdout" in python_Boot.keywords)) else (("_hx_" + "stdout") if (((((len("stdout") > 2) and ((ord("stdout"[0]) == 95))) and ((ord("stdout"[1]) == 95))) and ((ord("stdout"[(len("stdout") - 1)]) != 95)))) else "stdout")))) else None))
        Reflect.setField(o,"stderr",(Reflect.field(o,"stderr") if (hasattr(o,(("_hx_" + "stderr") if (("stderr" in python_Boot.keywords)) else (("_hx_" + "stderr") if (((((len("stderr") > 2) and ((ord("stderr"[0]) == 95))) and ((ord("stderr"[1]) == 95))) and ((ord("stderr"[(len("stderr") - 1)]) != 95)))) else "stderr")))) else None))
        Reflect.setField(o,"preexec_fn",(Reflect.field(o,"preexec_fn") if (hasattr(o,(("_hx_" + "preexec_fn") if (("preexec_fn" in python_Boot.keywords)) else (("_hx_" + "preexec_fn") if (((((len("preexec_fn") > 2) and ((ord("preexec_fn"[0]) == 95))) and ((ord("preexec_fn"[1]) == 95))) and ((ord("preexec_fn"[(len("preexec_fn") - 1)]) != 95)))) else "preexec_fn")))) else None))
        Reflect.setField(o,"close_fds",(Reflect.field(o,"close_fds") if (hasattr(o,(("_hx_" + "close_fds") if (("close_fds" in python_Boot.keywords)) else (("_hx_" + "close_fds") if (((((len("close_fds") > 2) and ((ord("close_fds"[0]) == 95))) and ((ord("close_fds"[1]) == 95))) and ((ord("close_fds"[(len("close_fds") - 1)]) != 95)))) else "close_fds")))) else None))
        Reflect.setField(o,"shell",(Reflect.field(o,"shell") if (hasattr(o,(("_hx_" + "shell") if (("shell" in python_Boot.keywords)) else (("_hx_" + "shell") if (((((len("shell") > 2) and ((ord("shell"[0]) == 95))) and ((ord("shell"[1]) == 95))) and ((ord("shell"[(len("shell") - 1)]) != 95)))) else "shell")))) else None))
        Reflect.setField(o,"cwd",(Reflect.field(o,"cwd") if (hasattr(o,(("_hx_" + "cwd") if (("cwd" in python_Boot.keywords)) else (("_hx_" + "cwd") if (((((len("cwd") > 2) and ((ord("cwd"[0]) == 95))) and ((ord("cwd"[1]) == 95))) and ((ord("cwd"[(len("cwd") - 1)]) != 95)))) else "cwd")))) else None))
        Reflect.setField(o,"env",(Reflect.field(o,"env") if (hasattr(o,(("_hx_" + "env") if (("env" in python_Boot.keywords)) else (("_hx_" + "env") if (((((len("env") > 2) and ((ord("env"[0]) == 95))) and ((ord("env"[1]) == 95))) and ((ord("env"[(len("env") - 1)]) != 95)))) else "env")))) else None))
        Reflect.setField(o,"universal_newlines",(Reflect.field(o,"universal_newlines") if (hasattr(o,(("_hx_" + "universal_newlines") if (("universal_newlines" in python_Boot.keywords)) else (("_hx_" + "universal_newlines") if (((((len("universal_newlines") > 2) and ((ord("universal_newlines"[0]) == 95))) and ((ord("universal_newlines"[1]) == 95))) and ((ord("universal_newlines"[(len("universal_newlines") - 1)]) != 95)))) else "universal_newlines")))) else None))
        Reflect.setField(o,"startupinfo",(Reflect.field(o,"startupinfo") if (hasattr(o,(("_hx_" + "startupinfo") if (("startupinfo" in python_Boot.keywords)) else (("_hx_" + "startupinfo") if (((((len("startupinfo") > 2) and ((ord("startupinfo"[0]) == 95))) and ((ord("startupinfo"[1]) == 95))) and ((ord("startupinfo"[(len("startupinfo") - 1)]) != 95)))) else "startupinfo")))) else None))
        Reflect.setField(o,"creationflags",(Reflect.field(o,"creationflags") if (hasattr(o,(("_hx_" + "creationflags") if (("creationflags" in python_Boot.keywords)) else (("_hx_" + "creationflags") if (((((len("creationflags") > 2) and ((ord("creationflags"[0]) == 95))) and ((ord("creationflags"[1]) == 95))) and ((ord("creationflags"[(len("creationflags") - 1)]) != 95)))) else "creationflags")))) else 0))
        self.process = (python_lib_subprocess_Popen(args1,Reflect.field(o,"bufsize"),Reflect.field(o,"executable"),Reflect.field(o,"stdin"),Reflect.field(o,"stdout"),Reflect.field(o,"stderr"),Reflect.field(o,"preexec_fn"),Reflect.field(o,"close_fds"),Reflect.field(o,"shell"),Reflect.field(o,"cwd"),Reflect.field(o,"env"),Reflect.field(o,"universal_newlines"),Reflect.field(o,"startupinfo"),Reflect.field(o,"creationflags")) if ((Sys.systemName() == "Windows")) else python_lib_subprocess_Popen(args1,Reflect.field(o,"bufsize"),Reflect.field(o,"executable"),Reflect.field(o,"stdin"),Reflect.field(o,"stdout"),Reflect.field(o,"stderr"),Reflect.field(o,"preexec_fn"),Reflect.field(o,"close_fds"),Reflect.field(o,"shell"),Reflect.field(o,"cwd"),Reflect.field(o,"env"),Reflect.field(o,"universal_newlines"),Reflect.field(o,"startupinfo")))
        exitCode = self.process.poll()
        if (exitCode is not None):
            errorMessage = self.process.stderr.readall().decode("utf-8")
            raise _HxException(((("Haxe server failed to start: (" + Std.string(exitCode)) + ") ") + ("null" if errorMessage is None else errorMessage)))
        self.errQueue = HaxeServerStdio.createServerMessageQueue(self.process.stderr)
        haxeVersionString = self.execute("-version",1.5).toString()
        haxe_Log.trace(("Haxe server started: " + ("null" if haxeVersionString is None else haxeVersionString)),_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 104, 'className': "HaxeServerStdio", 'methodName': "start"}))

    def restart(self):
        self.terminate()
        self.start(self.processUserArgs)

    def terminate(self):
        if (self.process is not None):
            haxe_Log.trace("Stopping haxe server",_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 121, 'className': "HaxeServerStdio", 'methodName': "terminate"}))
            self.process.terminate()
        self.process = None
        self.errQueue = None

    def buildAsync(self,hxml,onComplete,timeout_s = None):
        _gthis = self
        cancelled = False
        def _hx_local_0():
            result = _gthis.build(hxml,timeout_s)
            if (not cancelled):
                onComplete(result)
        buildThread = python_lib_threading_Thread(**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'target': _hx_local_0})))
        buildThread.start()
        def _hx_local_2():
            def _hx_local_1():
                nonlocal cancelled
                cancelled = True
            return _hx_AnonObject({'isRunning': buildThread.is_alive, 'cancel': _hx_local_1})
        return _hx_local_2()

    def display(self,hxml,filePath,location,mode,details,fileContent = None):
        displayDirectives = ""
        if details:
            displayDirectives = "\n-D display-details"
        if (fileContent is not None):
            displayDirectives = (("null" if displayDirectives is None else displayDirectives) + "\n-D display-stdin")
        displayDirectives = (("null" if displayDirectives is None else displayDirectives) + HxOverrides.stringOrNull(((((("\n--display \"" + ("null" if filePath is None else filePath)) + "\"@") + Std.string(location)) + HxOverrides.stringOrNull((("" if ((mode is None)) else ("@" + ("null" if mode is None else mode)))))))))
        if (fileContent is not None):
            displayDirectives = (("null" if displayDirectives is None else displayDirectives) + HxOverrides.stringOrNull(((("\n" + "\x01") + ("null" if fileContent is None else fileContent)))))
        result = self.execute((("null" if hxml is None else hxml) + ("null" if displayDirectives is None else displayDirectives)),1.5).toString()
        if (((-1 if ((0 >= len(result))) else ord(result[0]))) != ((-1 if ((0 >= len("<"))) else ord("<"[0])))):
            return HaxeServerStdio.parseCompilerOutput(result)
        return _hx_AnonObject({'message': result, 'hasError': False, 'log': []})

    def build(self,hxml,timeout_s = 120):
        if (timeout_s is None):
            timeout_s = 120
        return HaxeServerStdio.parseCompilerOutput(self.execute(hxml,timeout_s).toString())

    def execute(self,hxml,timeout_s = None):
        buffer = haxe_io_BytesBuffer()
        src = haxe_io_Bytes.ofString((("\n" + ("null" if hxml is None else hxml)) + "\n"),None)
        b2 = src.b
        _g = 0
        _g1 = src.length
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            buffer.b.append(b2[i])
        _hx_bytes = buffer.getBytes()
        length = _hx_bytes.length
        payloadBytes = haxe_io_Bytes.alloc((4 + length))
        payloadBytes.b[0] = (length & 255)
        payloadBytes.b[1] = ((length >> 8) & 255)
        payloadBytes.b[2] = ((length >> 16) & 255)
        payloadBytes.b[3] = (HxOverrides.rshift(length, 24) & 255)
        payloadBytes.blit(4,_hx_bytes,0,length)
        result = None
        self.processWriteLock.acquire()
        try:
            while True:
                self.errQueue.get(False)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            if isinstance(_hx_e1, python_lib_Empty):
                    pass
            else:
                e1 = _hx_e1
                haxe_Log.trace("Unknown error reading from queue: $e",_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 224, 'className': "HaxeServerStdio", 'methodName': "execute"}))
        self.process.stdin.write(payloadBytes.b)
        self.process.stdin.flush()
        try:
            result = self.errQueue.get(True,timeout_s)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            if isinstance(_hx_e1, python_lib_Empty):
                e2 = _hx_e1
                haxe_Log.trace("Error: errQueue is unexpectedly empty",_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 237, 'className': "HaxeServerStdio", 'methodName': "execute"}))
            else:
                e3 = _hx_e1
                haxe_Log.trace("Unknown error reading from queue: $e",_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 239, 'className': "HaxeServerStdio", 'methodName': "execute"}))
        self.processWriteLock.release()
        if (result is None):
            raise _HxException("Unable to read output from haxe compiler")
        return result

    @staticmethod
    def parseCompilerOutput(outputString):
        lines = outputString.split("\n")
        hasError = False
        log = []
        message = []
        _g = 0
        while (_g < len(lines)):
            line = (lines[_g] if _g >= 0 and _g < len(lines) else None)
            _g = (_g + 1)
            _g1 = (-1 if ((0 >= len(line))) else ord(line[0]))
            if (_g1 == 1):
                x = StringTools.rtrim(StringTools.replace(HxString.substr(line,1,None),"\x01","\n"))
                log.append(x)
            elif (_g1 == 2):
                hasError = True
            else:
                message.append(line)
        return _hx_AnonObject({'message': "\n".join([python_Boot.toString1(x1,'') for x1 in message]), 'hasError': hasError, 'log': log})

    @staticmethod
    def createServerMessageQueue(pipe):
        def _hx_local_1(pipe1,queue):
            while True:
                lengthHeader = haxe_io_Bytes.ofData(pipe1.read(4))
                if ((lengthHeader is None) or ((lengthHeader.length != 4))):
                    haxe_Log.trace("Pipe finished (case A)",_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 281, 'className': "HaxeServerStdio", 'methodName': "createServerMessageQueue"}))
                    break
                v = (((lengthHeader.b[0] | ((lengthHeader.b[1] << 8))) | ((lengthHeader.b[2] << 16))) | ((lengthHeader.b[3] << 24)))
                bytesRemaining = ((v | -2147483648) if ((((v & -2147483648)) != 0)) else v)
                messageBuffer = haxe_io_BytesBuffer()
                haxe_Log.trace((("Reading message (" + Std.string(bytesRemaining)) + " bytes)"),_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 286, 'className': "HaxeServerStdio", 'methodName': "createServerMessageQueue"}))
                pipeDead = False
                while (bytesRemaining > 0):
                    pipeBytes = haxe_io_Bytes.ofData(pipe1.read(bytesRemaining))
                    if (pipeBytes is None):
                        pipeDead = True
                    else:
                        bytesRemaining = (bytesRemaining - pipeBytes.length)
                        if (bytesRemaining > 0):
                            haxe_Log.trace((("\tread chunk of " + Std.string(pipeBytes.length)) + " bytes"),_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 298, 'className': "HaxeServerStdio", 'methodName': "createServerMessageQueue"}))
                        b2 = pipeBytes.b
                        _g = 0
                        _g1 = pipeBytes.length
                        while (_g < _g1):
                            i = _g
                            _g = (_g + 1)
                            messageBuffer.b.append(b2[i])
                if pipeDead:
                    haxe_Log.trace("Pipe finished (case B - message was null)",_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 305, 'className': "HaxeServerStdio", 'methodName': "createServerMessageQueue"}))
                    break
                if (bytesRemaining == 0):
                    messageBytes = messageBuffer.getBytes()
                    haxe_Log.trace("Message read successfully",_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 314, 'className': "HaxeServerStdio", 'methodName': "createServerMessageQueue"}))
                    haxe_Log.trace((("\"" + Std.string(messageBytes)) + "\""),_hx_AnonObject({'fileName': "src/HaxeServer.hx", 'lineNumber': 315, 'className': "HaxeServerStdio", 'methodName': "createServerMessageQueue"}))
                    queue.put(messageBytes)
                else:
                    raise _HxException("Unexpected number of bytes return from pipe")
            pipe1.close()
        enqueueMessages = _hx_local_1
        queue1 = python_lib_Queue()
        python_lib_threading_Thread(**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'target': enqueueMessages, 'args': tuple([pipe, queue1]), 'daemon': True}))).start()
        return queue1

HaxeServerStdio._hx_class = HaxeServerStdio


class HaxeView(sublime_plugin_ViewEventListener):
    _hx_class_name = "HaxeView"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["on_modified", "on_close", "on_post_save_async", "on_query_completions", "on_hover"]
    _hx_statics = ["HAXE_STATUS", "is_applicable", "applies_to_primary_view_only", "updateErrors", "generateFunctionCompletion", "isUpperCase", "clampString"]
    _hx_super = sublime_plugin_ViewEventListener


    def __init__(self,view):
        super().__init__(view)

    def on_modified(self):
        pass

    def on_close(self):
        pass

    def on_post_save_async(self):
        pass

    def on_query_completions(self,prefix,locations):
        completionLocation = (locations[0] if 0 < len(locations) else None)
        completionScope = self.view.scope_name(completionLocation)
        if (self.view.score_selector(completionLocation,"comment") > 0):
            return None
        viewContent = self.view.substr(sublime_Region(0,self.view.size()))
        displayMode = None
        index = ((completionLocation - len(prefix)) - 1)
        proceedingNonWordChar = ("" if (((index < 0) or ((index >= len(viewContent))))) else viewContent[index])
        if (proceedingNonWordChar == "."):
            displayMode = ""
            completionLocation = (completionLocation - len(prefix))
        else:
            displayMode = "toplevel"
        haxe_Log.trace((((("Autocomplete scope \"" + ("null" if completionScope is None else completionScope)) + "\" mode \"") + Std.string(displayMode)) + "\""),_hx_AnonObject({'fileName': "src/HaxeView.hx", 'lineNumber': 54, 'className': "HaxeView", 'methodName': "on_query_completions"}))
        if (displayMode is None):
            return None
        hxml = HaxeProject.getHxmlForView(self.view)
        if (hxml is None):
            self.view.set_status("haxe_status","Autocomplete: Could not find hxml")
            return None
        view = self.view
        haxeServer = None
        if (0 == 0):
            if (HaxeProject.haxeServerStdioHandle is None):
                HaxeProject.haxeServerStdioHandle = HaxeServerStdio()
            haxeServer = HaxeProject.haxeServerStdioHandle
        else:
            raise _HxException("Not yet supported")
        result = haxeServer.display(hxml,self.view.file_name(),completionLocation,displayMode,(displayMode == ""),viewContent)
        if (not result.hasError):
            xml = None
            try:
                xml = Xml.parse(result.message)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                self.view.set_status("haxe_status",("Autocomplete: " + HxOverrides.stringOrNull(result.message)))
                return None
            if ((xml.nodeType != Xml.Document) and ((xml.nodeType != Xml.Element))):
                raise _HxException(("Invalid nodeType " + Std.string(xml.nodeType)))
            this1 = xml
            x = this1
            maxDisplayLength = 50
            overflowSuffix = " …  "
            completions = list()
            if haxe_xml__Access_HasNodeAccess_Impl_.resolve(x,"list"):
                _g = 0
                _g1 = haxe_xml__Access_NodeListAccess_Impl_.resolve(haxe_xml__Access_NodeAccess_Impl_.resolve(x,"list"),"i")
                while (_g < len(_g1)):
                    item = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                    _g = (_g + 1)
                    name = haxe_xml__Access_AttribAccess_Impl_.resolve(item,"n")
                    kind = (haxe_xml__Access_AttribAccess_Impl_.resolve(item,"k") if (haxe_xml__Access_HasAttribAccess_Impl_.resolve(item,"k")) else "")
                    _hx_type = (haxe_xml__Access_Access_Impl_.get_innerData(haxe_xml__Access_NodeAccess_Impl_.resolve(item,"t")) if (haxe_xml__Access_HasNodeAccess_Impl_.resolve(item,"t")) else "")
                    display = name
                    info = None
                    kind1 = kind
                    _hx_local_2 = len(kind1)
                    if (_hx_local_2 == 3):
                        if (kind1 == "var"):
                            info = _hx_type
                        else:
                            info = kind
                    elif (_hx_local_2 == 6):
                        if (kind1 == "method"):
                            info = _hx_type
                        else:
                            info = kind
                    else:
                        info = kind
                    completion = name
                    if (kind == "method"):
                        func = SyntaxTools.parseHaxeFunctionSignature(_hx_type)
                        if ((func.parameters[0] if 0 < len(func.parameters) else None).type == "Void"):
                            _this = func.parameters
                            if (len(_this) != 0):
                                _this.pop(0)
                        _this1 = func.parameters
                        def _hx_local_4():
                            def _hx_local_3(p):
                                return ((("" + HxOverrides.stringOrNull(p.name)) + ":") + HxOverrides.stringOrNull(p.type))
                            return _hx_local_3
                        _this2 = list(map(_hx_local_4(),_this1))
                        parametersFormatted = ", ".join([python_Boot.toString1(x1,'') for x1 in _this2])
                        info1 = func.returnType
                        display1 = ((((("" + ("null" if name is None else name)) + "(") + ("null" if parametersFormatted is None else parametersFormatted)) + ")") if ((len(func.parameters) > 0)) else (("" + ("null" if name is None else name)) + "()"))
                        i = [1]
                        _this3 = func.parameters
                        def _hx_local_10(i1):
                            def _hx_local_5(p1):
                                nameString = ((":" + HxOverrides.stringOrNull(p1.name)) if ((p1.name is not None)) else "")
                                def _hx_local_9():
                                    _hx_local_6 = i1
                                    _hx_local_7 = 0
                                    _hx_local_8 = (_hx_local_6[_hx_local_7] if _hx_local_7 >= 0 and _hx_local_7 < len(_hx_local_6) else None)
                                    python_internal_ArrayImpl._set(_hx_local_6, _hx_local_7, (_hx_local_8 + 1))
                                    return _hx_local_8
                                snippetArguments1 = ("${" + Std.string(_hx_local_9()))
                                return ((("null" if snippetArguments1 is None else snippetArguments1) + ("null" if nameString is None else nameString)) + "}")
                            return _hx_local_5
                        snippetArguments = list(map(_hx_local_10(i),_this3))
                        completion1 = (((("" + ("null" if name is None else name)) + "(") + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in snippetArguments]))) + ")")
                        c_info = info1
                        c_display = display1
                        c_completion = completion1
                        display = c_display
                        info = c_info
                        completion = c_completion
                    tmp = completions.append
                    tmp1 = None
                    kind2 = kind
                    _hx_local_11 = len(kind2)
                    if (_hx_local_11 == 4):
                        if (kind2 == "type"):
                            tmp1 = 3
                        else:
                            tmp1 = 0
                    elif (_hx_local_11 == 7):
                        if (kind2 == "package"):
                            tmp1 = 4
                        else:
                            tmp1 = 0
                    elif (_hx_local_11 == 3):
                        if (kind2 == "var"):
                            tmp1 = 2
                        else:
                            tmp1 = 0
                    elif (_hx_local_11 == 6):
                        if (kind2 == "method"):
                            tmp1 = 1
                        else:
                            tmp1 = 0
                    else:
                        tmp1 = 0
                    tmp(_hx_AnonObject({'display': display, 'info': info, 'completion': completion, 'kind': tmp1}))
            elif haxe_xml__Access_HasNodeAccess_Impl_.resolve(x,"il"):
                _g2 = 0
                _g11 = haxe_xml__Access_NodeListAccess_Impl_.resolve(haxe_xml__Access_NodeAccess_Impl_.resolve(x,"il"),"i")
                while (_g2 < len(_g11)):
                    item1 = (_g11[_g2] if _g2 >= 0 and _g2 < len(_g11) else None)
                    _g2 = (_g2 + 1)
                    name1 = haxe_xml__Access_Access_Impl_.get_innerData(item1)
                    kind3 = haxe_xml__Access_AttribAccess_Impl_.resolve(item1,"k")
                    type1 = (haxe_xml__Access_AttribAccess_Impl_.resolve(item1,"t") if (haxe_xml__Access_HasAttribAccess_Impl_.resolve(item1,"t")) else None)
                    path = (haxe_xml__Access_AttribAccess_Impl_.resolve(item1,"p") if (haxe_xml__Access_HasAttribAccess_Impl_.resolve(item1,"p")) else None)
                    display2 = name1
                    info2 = (type1 if ((type1 is not None)) else kind3)
                    completion2 = name1
                    if (type1 is not None):
                        t = SyntaxTools.parseHaxeFunctionSignature(type1)
                        if (len(t.parameters) > 0):
                            kind3 = "method"
                            if ((t.parameters[0] if 0 < len(t.parameters) else None).type == "Void"):
                                _this4 = t.parameters
                                if (len(_this4) != 0):
                                    _this4.pop(0)
                            _this5 = t.parameters
                            def _hx_local_14():
                                def _hx_local_13(p2):
                                    return ((("" + HxOverrides.stringOrNull(p2.name)) + ":") + HxOverrides.stringOrNull(p2.type))
                                return _hx_local_13
                            _this6 = list(map(_hx_local_14(),_this5))
                            parametersFormatted1 = ", ".join([python_Boot.toString1(x1,'') for x1 in _this6])
                            info3 = t.returnType
                            display3 = ((((("" + ("null" if name1 is None else name1)) + "(") + ("null" if parametersFormatted1 is None else parametersFormatted1)) + ")") if ((len(t.parameters) > 0)) else (("" + ("null" if name1 is None else name1)) + "()"))
                            i2 = [1]
                            _this7 = t.parameters
                            def _hx_local_20(i3):
                                def _hx_local_15(p3):
                                    nameString1 = ((":" + HxOverrides.stringOrNull(p3.name)) if ((p3.name is not None)) else "")
                                    def _hx_local_19():
                                        _hx_local_16 = i3
                                        _hx_local_17 = 0
                                        _hx_local_18 = (_hx_local_16[_hx_local_17] if _hx_local_17 >= 0 and _hx_local_17 < len(_hx_local_16) else None)
                                        python_internal_ArrayImpl._set(_hx_local_16, _hx_local_17, (_hx_local_18 + 1))
                                        return _hx_local_18
                                    snippetArguments3 = ("${" + Std.string(_hx_local_19()))
                                    return ((("null" if snippetArguments3 is None else snippetArguments3) + ("null" if nameString1 is None else nameString1)) + "}")
                                return _hx_local_15
                            snippetArguments2 = list(map(_hx_local_20(i2),_this7))
                            completion3 = (((("" + ("null" if name1 is None else name1)) + "(") + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in snippetArguments2]))) + ")")
                            c_info1 = info3
                            c_display1 = display3
                            c_completion1 = completion3
                            display2 = c_display1
                            info2 = c_info1
                            completion2 = c_completion1
                        else:
                            kind3 = "var"
                    tmp2 = completions.append
                    tmp3 = None
                    if (kind3 is None):
                        tmp3 = 0
                    else:
                        kind4 = kind3
                        _hx_local_21 = len(kind4)
                        if (_hx_local_21 == 4):
                            if (kind4 == "type"):
                                tmp3 = 3
                            else:
                                tmp3 = 0
                        elif (_hx_local_21 == 7):
                            if (kind4 == "package"):
                                tmp3 = 4
                            else:
                                tmp3 = 0
                        elif (_hx_local_21 == 3):
                            if (kind4 == "var"):
                                tmp3 = 2
                            else:
                                tmp3 = 0
                        elif (_hx_local_21 == 6):
                            if (kind4 == "method"):
                                tmp3 = 1
                            else:
                                tmp3 = 0
                        else:
                            tmp3 = 0
                    tmp2(_hx_AnonObject({'display': display2, 'info': info2, 'completion': completion2, 'kind': tmp3}))
            def _hx_local_22(c):
                if ((c.info == "Unknown<0>") or ((c.info == "Unknown0"))):
                    c.info = "•"
                sublimeCompletions1 = None
                _g3 = c.kind
                if (_g3 == 0):
                    sublimeCompletions1 = " "
                elif (_g3 == 1):
                    sublimeCompletions1 = "ƒ"
                elif (_g3 == 2):
                    sublimeCompletions1 = "ᵥ"
                elif (_g3 == 3):
                    sublimeCompletions1 = "ᴛ"
                elif (_g3 == 4):
                    sublimeCompletions1 = "."
                else:
                    pass
                c.display = ((("null" if sublimeCompletions1 is None else sublimeCompletions1) + " ") + HxOverrides.stringOrNull(c.display))
                if (len(c.display) > ((maxDisplayLength - len(overflowSuffix)))):
                    c.display = (HxOverrides.stringOrNull(HxString.substr(c.display,0,(maxDisplayLength - len(overflowSuffix)))) + ("null" if overflowSuffix is None else overflowSuffix))
                return [(HxOverrides.stringOrNull(c.display) + HxOverrides.stringOrNull(((("\t" + HxOverrides.stringOrNull(c.info)) if ((c.info is not None)) else "")))), c.completion]
            sublimeCompletions = list(map(_hx_local_22,completions))
            self.view.erase_status("haxe_status")
            return (sublimeCompletions, (sublime_Sublime.INHIBIT_WORD_COMPLETIONS if ((len(sublimeCompletions) > 0)) else 0))
        else:
            self.view.set_status("haxe_status",("Autocomplete: " + HxOverrides.stringOrNull(result.message)))
        if (displayMode == ""):
            return ([], (sublime_Sublime.INHIBIT_WORD_COMPLETIONS | sublime_Sublime.INHIBIT_EXPLICIT_COMPLETIONS))
        else:
            return None

    def on_hover(self,point,hover_zone):
        if (hover_zone != sublime_Sublime.HOVER_TEXT):
            return
        scope = self.view.scope_name(point)
        hxml = HaxeProject.getHxmlForView(self.view)
        if (hxml is None):
            self.view.set_status("haxe_status","Autocomplete: Could not find hxml")
            return
        viewContent = self.view.substr(sublime_Region(0,self.view.size()))
        view = self.view
        haxeServer = None
        if (0 == 0):
            if (HaxeProject.haxeServerStdioHandle is None):
                HaxeProject.haxeServerStdioHandle = HaxeServerStdio()
            haxeServer = HaxeProject.haxeServerStdioHandle
        else:
            raise _HxException("Not yet supported")
        displayMode = "type"
        details = True
        result = haxeServer.display(hxml,self.view.file_name(),point,displayMode,details,viewContent)
        haxe_Log.trace(((("on_hover \"" + ("null" if scope is None else scope)) + "\" ") + Std.string(result)),_hx_AnonObject({'fileName': "src/HaxeView.hx", 'lineNumber': 243, 'className': "HaxeView", 'methodName': "on_hover"}))
        try:
            if (not result.hasError):
                x = Xml.parse(result.message)
                if ((x.nodeType != Xml.Document) and ((x.nodeType != Xml.Element))):
                    raise _HxException(("Invalid nodeType " + Std.string(x.nodeType)))
                this1 = x
                x1 = this1
                typeNode = haxe_xml__Access_NodeAccess_Impl_.resolve(x1,"type")
                docs = (haxe_xml__Access_AttribAccess_Impl_.resolve(typeNode,"d") if (haxe_xml__Access_HasAttribAccess_Impl_.resolve(typeNode,"d")) else None)
                _hx_type = haxe_xml__Access_Access_Impl_.get_innerHTML(typeNode)
                docs = ((("<p>" + HxOverrides.stringOrNull(StringTools.replace(StringTools.trim(docs),"\n","<br>"))) + "</p>") if ((docs is not None)) else "")
                self.view.show_popup(((("<code>" + ("null" if _hx_type is None else _hx_type)) + "</code>") + ("null" if docs is None else docs)),(sublime_Sublime.HIDE_ON_MOUSE_MOVE_AWAY | sublime_Sublime.COOPERATE_WITH_AUTO_COMPLETE),point,700)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            haxe_Log.trace(("on_hover error: " + Std.string(e)),_hx_AnonObject({'fileName': "src/HaxeView.hx", 'lineNumber': 257, 'className': "HaxeView", 'methodName': "on_hover"}))

    @staticmethod
    def is_applicable(settings):
        return (settings.get("syntax") == "Packages/Haxe Minimal/syntax/haxe.tmLanguage")

    @staticmethod
    def applies_to_primary_view_only():
        return False

    @staticmethod
    def updateErrors(haxeErrorString):
        pass

    @staticmethod
    def generateFunctionCompletion(name,func):
        if ((func.parameters[0] if 0 < len(func.parameters) else None).type == "Void"):
            _this = func.parameters
            if (len(_this) != 0):
                _this.pop(0)
        def _hx_local_0(p):
            return ((("" + HxOverrides.stringOrNull(p.name)) + ":") + HxOverrides.stringOrNull(p.type))
        _this1 = list(map(_hx_local_0,func.parameters))
        parametersFormatted = ", ".join([python_Boot.toString1(x1,'') for x1 in _this1])
        info = func.returnType
        display = ((((("" + ("null" if name is None else name)) + "(") + ("null" if parametersFormatted is None else parametersFormatted)) + ")") if ((len(func.parameters) > 0)) else (("" + ("null" if name is None else name)) + "()"))
        i = 1
        def _hx_local_2(p1):
            nonlocal i
            i = (i + 1)
            return ((("${" + Std.string(((i - 1)))) + HxOverrides.stringOrNull((((":" + HxOverrides.stringOrNull(p1.name)) if ((p1.name is not None)) else "")))) + "}")
        snippetArguments = list(map(_hx_local_2,func.parameters))
        return _hx_AnonObject({'info': info, 'display': display, 'completion': (((("" + ("null" if name is None else name)) + "(") + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in snippetArguments]))) + ")")})

    @staticmethod
    def isUpperCase(_hx_str):
        return (_hx_str.upper() == _hx_str)

    @staticmethod
    def clampString(_hx_str,minLength,maxLength,overflowSuffix,pad):
        if (len(_hx_str) > ((maxLength - HxOverrides.length(overflowSuffix)))):
            _hx_str = (HxOverrides.stringOrNull(HxString.substr(_hx_str,0,(maxLength - HxOverrides.length(overflowSuffix)))) + Std.string(overflowSuffix))
        elif (len(_hx_str) < minLength):
            _hx_str = pad(_hx_str,minLength)
        return _hx_str

HaxeView._hx_class = HaxeView


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field", "setField"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)

    @staticmethod
    def setField(o,field,value):
        setattr(o,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)),value)
Reflect._hx_class = Reflect


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["string", "parseInt", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def parseInt(x):
        if (x is None):
            return None
        try:
            return int(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            try:
                if (HxString.substr(x,0,2).lower() == "0x"):
                    return int(x,16)
                raise _HxException("fail")
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e1 = _hx_e1
                x1 = Std.parseFloat(x)
                r = None
                try:
                    r = int(x1)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    r = None
                if (r is None):
                    r1 = Std.shortenPossibleNumber(x)
                    if (r1 != x):
                        return Std.parseInt(r1)
                    else:
                        return None
                return r

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g = 0
        _g1 = len(x)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            elif (((((((((((_g2 == 57) or ((_g2 == 56))) or ((_g2 == 55))) or ((_g2 == 54))) or ((_g2 == 53))) or ((_g2 == 52))) or ((_g2 == 51))) or ((_g2 == 50))) or ((_g2 == 49))) or ((_g2 == 48))) or ((_g2 == 46))):
                r = (("null" if r is None else r) + ("null" if c is None else c))
            else:
                break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN
Std._hx_class = Std


class StringBuf:
    _hx_class_name = "StringBuf"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["get_length"]

    def __init__(self):
        self.b = python_lib_io_StringIO()

    def get_length(self):
        pos = self.b.tell()
        self.b.seek(0,2)
        _hx_len = self.b.tell()
        self.b.seek(pos,0)
        return _hx_len

StringBuf._hx_class = StringBuf


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["htmlEscape", "isSpace", "ltrim", "rtrim", "trim", "replace"]

    @staticmethod
    def htmlEscape(s,quotes = None):
        buf_b = python_lib_io_StringIO()
        _g_offset = 0
        while (_g_offset < len(s)):
            index = _g_offset
            _g_offset = (_g_offset + 1)
            code = (-1 if ((index >= len(s))) else ord(s[index]))
            if (code == 34):
                if quotes:
                    buf_b.write("&quot;")
                else:
                    buf_b.write("".join(map(chr,[code])))
            elif (code == 38):
                buf_b.write("&amp;")
            elif (code == 39):
                if quotes:
                    buf_b.write("&#039;")
                else:
                    buf_b.write("".join(map(chr,[code])))
            elif (code == 60):
                buf_b.write("&lt;")
            elif (code == 62):
                buf_b.write("&gt;")
            else:
                buf_b.write("".join(map(chr,[code])))
        return buf_b.getvalue()

    @staticmethod
    def isSpace(s,pos):
        if (((len(s) == 0) or ((pos < 0))) or ((pos >= len(s)))):
            return False
        c = HxString.charCodeAt(s,pos)
        if (not (((c > 8) and ((c < 14))))):
            return (c == 32)
        else:
            return True

    @staticmethod
    def ltrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,r)):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,r,(l - r))
        else:
            return s

    @staticmethod
    def rtrim(s):
        l = len(s)
        r = 0
        while ((r < l) and StringTools.isSpace(s,((l - r) - 1))):
            r = (r + 1)
        if (r > 0):
            return HxString.substr(s,0,(l - r))
        else:
            return s

    @staticmethod
    def trim(s):
        return StringTools.ltrim(StringTools.rtrim(s))

    @staticmethod
    def replace(s,sub,by):
        _this = (list(s) if ((sub == "")) else s.split(sub))
        return by.join([python_Boot.toString1(x1,'') for x1 in _this])
StringTools._hx_class = StringTools


class SyntaxTools:
    _hx_class_name = "SyntaxTools"
    __slots__ = ()
    _hx_statics = ["scopeAwareSplit", "unwrap", "parseHaxeFunctionSignature"]

    @staticmethod
    def scopeAwareSplit(string,delimiter,scopeIncreaseChars = "(<{",scopeDecreaseChars = ")>}"):
        if (scopeIncreaseChars is None):
            scopeIncreaseChars = "(<{"
        if (scopeDecreaseChars is None):
            scopeDecreaseChars = ")>}"
        parts = list()
        buffer = StringBuf()
        _g = []
        _g1 = 0
        _g2 = len(scopeIncreaseChars)
        while (_g1 < _g2):
            _g1 = (_g1 + 1)
            _g.append(0)
        _g3 = 0
        _g4 = len(string)
        while (_g3 < _g4):
            i = _g3
            _g3 = (_g3 + 1)
            c = ("" if (((i < 0) or ((i >= len(string))))) else string[i])
            groundLevel = True
            _g31 = 0
            while (_g31 < len(_g)):
                def _hx_local_2():
                    nonlocal _g31
                    _hx_local_1 = _g31
                    _g31 = (_g31 + 1)
                    return _hx_local_1
                l = python_internal_ArrayImpl._get(_g, _hx_local_2())
                if (l > 0):
                    groundLevel = False
                    break
            if ((c == delimiter) and groundLevel):
                x = buffer.b.getvalue()
                parts.append(x)
                buffer = StringBuf()
            else:
                incIndex = scopeIncreaseChars.find(c)
                decIndex = scopeDecreaseChars.find(c)
                if (incIndex != -1):
                    python_internal_ArrayImpl._set(_g, incIndex, ((_g[incIndex] if incIndex >= 0 and incIndex < len(_g) else None) + 1))
                if (decIndex != -1):
                    python_internal_ArrayImpl._set(_g, decIndex, ((_g[decIndex] if decIndex >= 0 and decIndex < len(_g) else None) - 1))
                s = Std.string(c)
                buffer.b.write(s)
        x1 = buffer.b.getvalue()
        parts.append(x1)
        return parts

    @staticmethod
    def unwrap(string,openChar,closeChar,recursive = False):
        if (recursive is None):
            recursive = False
        level = 0
        buffer = StringBuf()
        matchingChars = (openChar == closeChar)
        _g = 0
        _g1 = len(string)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = ("" if (((i < 0) or ((i >= len(string))))) else string[i])
            if matchingChars:
                if (c == openChar):
                    level = (0 if ((level == 1)) else 1)
                if (level == 1):
                    s = Std.string(c)
                    buffer.b.write(s)
            else:
                if (c == closeChar):
                    level = (level - 1)
                if (level >= 1):
                    s1 = Std.string(c)
                    buffer.b.write(s1)
                if (c == openChar):
                    level = (level + 1)
        unwrapped = (string if ((buffer.get_length() == 0)) else buffer.b.getvalue())
        if recursive:
            if (len(unwrapped) == len(string)):
                return string
            else:
                return SyntaxTools.unwrap(unwrapped,openChar,closeChar,recursive)
        else:
            return unwrapped

    @staticmethod
    def parseHaxeFunctionSignature(signature):
        parameters = None
        arrowMarker = "\x1F"
        arrowParts = SyntaxTools.scopeAwareSplit(StringTools.replace(signature,"->",arrowMarker),arrowMarker,"(<{",")>}")
        returnType = StringTools.trim((None if ((len(arrowParts) == 0)) else arrowParts.pop()))
        if (len(arrowParts) > 0):
            def _hx_local_0(part):
                return SyntaxTools.unwrap(part,"(",")")
            unwrappedArrowParts = list(map(_hx_local_0,arrowParts))
            parameterExpressions = (SyntaxTools.scopeAwareSplit((unwrappedArrowParts[0] if 0 < len(unwrappedArrowParts) else None),",","(<{",")>}") + unwrappedArrowParts[1:None])
            def _hx_local_1(p):
                return StringTools.replace(p,arrowMarker,"->")
            parameterExpressions = list(map(_hx_local_1,parameterExpressions))
            def _hx_local_2(expr):
                firstColonIdx = expr.find(":")
                return _hx_AnonObject({'name': (StringTools.trim(HxString.substr(expr,0,firstColonIdx)) if ((firstColonIdx != -1)) else None), 'type': StringTools.trim(HxString.substr(expr,(firstColonIdx + 1),None))})
            parameters = list(map(_hx_local_2,parameterExpressions))
        else:
            parameters = []
        return _hx_AnonObject({'parameters': parameters, 'returnType': returnType})
SyntaxTools._hx_class = SyntaxTools


class sys_FileSystem:
    _hx_class_name = "sys.FileSystem"
    __slots__ = ()
    _hx_statics = ["fullPath", "readDirectory"]

    @staticmethod
    def fullPath(relPath):
        return python_lib_os_Path.realpath(relPath)

    @staticmethod
    def readDirectory(path):
        return python_lib_Os.listdir(path)
sys_FileSystem._hx_class = sys_FileSystem


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()
haxe_IMap._hx_class = haxe_IMap


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["keys"]

    def __init__(self):
        self.h = dict()

    def keys(self):
        return python_HaxeIterator(iter(self.h.keys()))

haxe_ds_StringMap._hx_class = haxe_ds_StringMap


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has

python_HaxeIterator._hx_class = python_HaxeIterator


class Sys:
    _hx_class_name = "Sys"
    __slots__ = ()
    _hx_statics = ["environ", "time", "exit", "print", "println", "args", "getEnv", "putEnv", "environment", "sleep", "setTimeLocale", "getCwd", "setCwd", "systemName", "command", "cpuTime", "executablePath", "_programPath", "programPath", "getChar", "stdin", "stdout", "stderr"]

    @staticmethod
    def time():
        return python_lib_Time.time()

    @staticmethod
    def exit(code):
        python_lib_Sys.exit(code)

    @staticmethod
    def print(v):
        python_Lib.printString(Std.string(v))

    @staticmethod
    def println(v):
        python_Lib.printString((("" + Std.string(v)) + "\n"))

    @staticmethod
    def args():
        return python_lib_Sys.argv[1:None]

    @staticmethod
    def getEnv(s):
        return Sys.environ.h.get(s,None)

    @staticmethod
    def putEnv(s,v):
        python_lib_Os.putenv(s,v)
        Sys.environ.h[s] = v

    @staticmethod
    def environment():
        return Sys.environ

    @staticmethod
    def sleep(seconds):
        python_lib_Time.sleep(seconds)

    @staticmethod
    def setTimeLocale(loc):
        return False

    @staticmethod
    def getCwd():
        return python_lib_Os.getcwd()

    @staticmethod
    def setCwd(s):
        python_lib_Os.chdir(s)

    @staticmethod
    def systemName():
        _g = python_lib_Sys.platform
        if _g.startswith("linux"):
            return "Linux"
        else:
            _hx_local_0 = len(_g)
            if (_hx_local_0 == 5):
                if (_g == "win32"):
                    return "Windows"
                else:
                    raise _HxException("not supported platform")
            elif (_hx_local_0 == 6):
                if (_g == "cygwin"):
                    return "Windows"
                elif (_g == "darwin"):
                    return "Mac"
                else:
                    raise _HxException("not supported platform")
            else:
                raise _HxException("not supported platform")

    @staticmethod
    def command(cmd,args = None):
        if (args is None):
            return python_lib_Subprocess.call(cmd,**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'shell': True})))
        else:
            return python_lib_Subprocess.call(([cmd] + args))

    @staticmethod
    def cpuTime():
        return python_lib_Timeit.default_timer()

    @staticmethod
    def executablePath():
        return python_internal_ArrayImpl._get(python_lib_Sys.argv, 0)

    @staticmethod
    def programPath():
        return Sys._programPath

    @staticmethod
    def getChar(echo):
        ch = None
        _g = Sys.systemName()
        _hx_local_0 = len(_g)
        if (_hx_local_0 == 5):
            if (_g == "Linux"):
                fd = python_lib_Sys.stdin.fileno()
                old = python_lib_Termios.tcgetattr(fd)
                fileNo = fd
                when = python_lib_Termios.TCSADRAIN
                settings = old
                def _hx_local_1():
                    python_lib_Termios.tcsetattr(fileNo,when,settings)
                restore = _hx_local_1
                try:
                    python_lib_Tty.setraw(fd)
                    x = python_lib_Sys.stdin.read(1)
                    restore()
                    ch = HxString.charCodeAt(x,0)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e = _hx_e1
                    restore()
                    raise _HxException(e)
            else:
                raise _HxException((("platform " + ("null" if _g is None else _g)) + " not supported"))
        elif (_hx_local_0 == 3):
            if (_g == "Mac"):
                fd = python_lib_Sys.stdin.fileno()
                old = python_lib_Termios.tcgetattr(fd)
                fileNo = fd
                when = python_lib_Termios.TCSADRAIN
                settings = old
                def _hx_local_2():
                    python_lib_Termios.tcsetattr(fileNo,when,settings)
                restore = _hx_local_2
                try:
                    python_lib_Tty.setraw(fd)
                    x = python_lib_Sys.stdin.read(1)
                    restore()
                    ch = HxString.charCodeAt(x,0)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e = _hx_e1
                    restore()
                    raise _HxException(e)
            else:
                raise _HxException((("platform " + ("null" if _g is None else _g)) + " not supported"))
        elif (_hx_local_0 == 7):
            if (_g == "Windows"):
                ch = HxString.charCodeAt(python_lib_Msvcrt.getwch(),0)
            else:
                raise _HxException((("platform " + ("null" if _g is None else _g)) + " not supported"))
        else:
            raise _HxException((("platform " + ("null" if _g is None else _g)) + " not supported"))
        if echo:
            python_Lib.printString(Std.string("".join(map(chr,[ch]))))
        return ch

    @staticmethod
    def stdin():
        return python_io_IoTools.createFileInputFromText(python_lib_Sys.stdin)

    @staticmethod
    def stdout():
        return python_io_IoTools.createFileOutputFromText(python_lib_Sys.stdout)

    @staticmethod
    def stderr():
        return python_io_IoTools.createFileOutputFromText(python_lib_Sys.stderr)
Sys._hx_class = Sys


class Type:
    _hx_class_name = "Type"
    __slots__ = ()
    _hx_statics = ["getClass", "getClassName"]

    @staticmethod
    def getClass(o):
        if (o is None):
            return None
        o1 = o
        if ((o1 is not None) and ((HxOverrides.eq(o1,str) or python_lib_Inspect.isclass(o1)))):
            return None
        if isinstance(o,_hx_AnonObject):
            return None
        if hasattr(o,"_hx_class"):
            return o._hx_class
        if hasattr(o,"__class__"):
            return o.__class__
        else:
            return None

    @staticmethod
    def getClassName(c):
        if hasattr(c,"_hx_class_name"):
            return c._hx_class_name
        else:
            if (c == list):
                return "Array"
            if (c == Math):
                return "Math"
            if (c == str):
                return "String"
            try:
                return c.__name__
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return None
Type._hx_class = Type


class Xml:
    _hx_class_name = "Xml"
    __slots__ = ("nodeType", "nodeName", "nodeValue", "parent", "children", "attributeMap")
    _hx_fields = ["nodeType", "nodeName", "nodeValue", "parent", "children", "attributeMap"]
    _hx_methods = ["get", "set", "exists", "attributes", "elementsNamed", "addChild", "removeChild", "toString"]
    _hx_statics = ["Element", "PCData", "CData", "Comment", "DocType", "ProcessingInstruction", "Document", "parse", "createElement", "createPCData", "createCData", "createComment", "createDocType", "createProcessingInstruction", "createDocument"]

    def __init__(self,nodeType):
        self.parent = None
        self.nodeValue = None
        self.nodeName = None
        self.nodeType = nodeType
        self.children = []
        self.attributeMap = haxe_ds_StringMap()

    def get(self,att):
        if (self.nodeType != Xml.Element):
            raise _HxException(("Bad node type, expected Element but found " + Std.string(self.nodeType)))
        return self.attributeMap.h.get(att,None)

    def set(self,att,value):
        if (self.nodeType != Xml.Element):
            raise _HxException(("Bad node type, expected Element but found " + Std.string(self.nodeType)))
        self.attributeMap.h[att] = value

    def exists(self,att):
        if (self.nodeType != Xml.Element):
            raise _HxException(("Bad node type, expected Element but found " + Std.string(self.nodeType)))
        return (att in self.attributeMap.h)

    def attributes(self):
        if (self.nodeType != Xml.Element):
            raise _HxException(("Bad node type, expected Element but found " + Std.string(self.nodeType)))
        return self.attributeMap.keys()

    def elementsNamed(self,name):
        if ((self.nodeType != Xml.Document) and ((self.nodeType != Xml.Element))):
            raise _HxException(("Bad node type, expected Element or Document but found " + Std.string(self.nodeType)))
        _g = []
        _g1 = 0
        _g2 = self.children
        while (_g1 < len(_g2)):
            child = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
            _g1 = (_g1 + 1)
            tmp = None
            if (child.nodeType == Xml.Element):
                if (child.nodeType != Xml.Element):
                    raise _HxException(("Bad node type, expected Element but found " + Std.string(child.nodeType)))
                tmp = (child.nodeName == name)
            else:
                tmp = False
            if tmp:
                _g.append(child)
        return python_HaxeIterator(_g.__iter__())

    def addChild(self,x):
        if ((self.nodeType != Xml.Document) and ((self.nodeType != Xml.Element))):
            raise _HxException(("Bad node type, expected Element or Document but found " + Std.string(self.nodeType)))
        if (x.parent is not None):
            x.parent.removeChild(x)
        self.children.append(x)
        x.parent = self

    def removeChild(self,x):
        if ((self.nodeType != Xml.Document) and ((self.nodeType != Xml.Element))):
            raise _HxException(("Bad node type, expected Element or Document but found " + Std.string(self.nodeType)))
        if python_internal_ArrayImpl.remove(self.children,x):
            x.parent = None
            return True
        return False

    def toString(self):
        return haxe_xml_Printer.print(self)

    @staticmethod
    def parse(_hx_str):
        return haxe_xml_Parser.parse(_hx_str)

    @staticmethod
    def createElement(name):
        xml = Xml(Xml.Element)
        if (xml.nodeType != Xml.Element):
            raise _HxException(("Bad node type, expected Element but found " + Std.string(xml.nodeType)))
        xml.nodeName = name
        return xml

    @staticmethod
    def createPCData(data):
        xml = Xml(Xml.PCData)
        if ((xml.nodeType == Xml.Document) or ((xml.nodeType == Xml.Element))):
            raise _HxException(("Bad node type, unexpected " + Std.string(xml.nodeType)))
        xml.nodeValue = data
        return xml

    @staticmethod
    def createCData(data):
        xml = Xml(Xml.CData)
        if ((xml.nodeType == Xml.Document) or ((xml.nodeType == Xml.Element))):
            raise _HxException(("Bad node type, unexpected " + Std.string(xml.nodeType)))
        xml.nodeValue = data
        return xml

    @staticmethod
    def createComment(data):
        xml = Xml(Xml.Comment)
        if ((xml.nodeType == Xml.Document) or ((xml.nodeType == Xml.Element))):
            raise _HxException(("Bad node type, unexpected " + Std.string(xml.nodeType)))
        xml.nodeValue = data
        return xml

    @staticmethod
    def createDocType(data):
        xml = Xml(Xml.DocType)
        if ((xml.nodeType == Xml.Document) or ((xml.nodeType == Xml.Element))):
            raise _HxException(("Bad node type, unexpected " + Std.string(xml.nodeType)))
        xml.nodeValue = data
        return xml

    @staticmethod
    def createProcessingInstruction(data):
        xml = Xml(Xml.ProcessingInstruction)
        if ((xml.nodeType == Xml.Document) or ((xml.nodeType == Xml.Element))):
            raise _HxException(("Bad node type, unexpected " + Std.string(xml.nodeType)))
        xml.nodeValue = data
        return xml

    @staticmethod
    def createDocument():
        return Xml(Xml.Document)

Xml._hx_class = Xml


class haxe_Log:
    _hx_class_name = "haxe.Log"
    __slots__ = ()
    _hx_statics = ["formatOutput", "trace"]

    @staticmethod
    def formatOutput(v,infos):
        _hx_str = Std.string(v)
        if (infos is None):
            return _hx_str
        pstr = ((HxOverrides.stringOrNull(infos.fileName) + ":") + Std.string(infos.lineNumber))
        if ((infos is not None) and ((Reflect.field(infos,"customParams") is not None))):
            _g = 0
            _g1 = Reflect.field(infos,"customParams")
            while (_g < len(_g1)):
                def _hx_local_1():
                    nonlocal _g
                    _hx_local_0 = _g
                    _g = (_g + 1)
                    return _hx_local_0
                v1 = python_internal_ArrayImpl._get(_g1, _hx_local_1())
                _hx_str = (("null" if _hx_str is None else _hx_str) + ((", " + Std.string(v1))))
        return ((("null" if pstr is None else pstr) + ": ") + ("null" if _hx_str is None else _hx_str))

    @staticmethod
    def trace(v,infos = None):
        python_Lib.printString((("" + Std.string(haxe_Log.formatOutput(v,infos))) + "\n"))
haxe_Log._hx_class = haxe_Log


class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_methods = ["blit", "getString", "toString"]
    _hx_statics = ["alloc", "ofString", "ofData"]

    def __init__(self,length,b):
        self.length = length
        self.b = b

    def blit(self,pos,src,srcpos,_hx_len):
        if (((((pos < 0) or ((srcpos < 0))) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))) or (((srcpos + _hx_len) > src.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        self.b[pos:pos+_hx_len] = src.b[srcpos:srcpos+_hx_len]

    def getString(self,pos,_hx_len,encoding = None):
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        return self.b[pos:pos+_hx_len].decode('UTF-8','replace')

    def toString(self):
        return self.getString(0,self.length)

    @staticmethod
    def alloc(length):
        return haxe_io_Bytes(length,bytearray(length))

    @staticmethod
    def ofString(s,encoding = None):
        b = bytearray(s,"UTF-8")
        return haxe_io_Bytes(len(b),b)

    @staticmethod
    def ofData(b):
        return haxe_io_Bytes(len(b),b)

haxe_io_Bytes._hx_class = haxe_io_Bytes


class haxe_io_BytesBuffer:
    _hx_class_name = "haxe.io.BytesBuffer"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["getBytes"]

    def __init__(self):
        self.b = list()

    def getBytes(self):
        buf = bytearray(self.b)
        _hx_bytes = haxe_io_Bytes(len(buf),buf)
        self.b = None
        return _hx_bytes

haxe_io_BytesBuffer._hx_class = haxe_io_BytesBuffer

class haxe_io_Encoding(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Encoding"
haxe_io_Encoding.UTF8 = haxe_io_Encoding("UTF8", 0, list())
haxe_io_Encoding.RawNative = haxe_io_Encoding("RawNative", 1, list())
haxe_io_Encoding._hx_class = haxe_io_Encoding

class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, [e])
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, list())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, list())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, list())
haxe_io_Error._hx_class = haxe_io_Error


class haxe_io_Input:
    _hx_class_name = "haxe.io.Input"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["set_bigEndian"]

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b

haxe_io_Input._hx_class = haxe_io_Input


class haxe_io_Output:
    _hx_class_name = "haxe.io.Output"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["set_bigEndian"]

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b

haxe_io_Output._hx_class = haxe_io_Output


class haxe_io_Path:
    _hx_class_name = "haxe.io.Path"
    __slots__ = ("dir", "file", "ext", "backslash")
    _hx_fields = ["dir", "file", "ext", "backslash"]
    _hx_methods = ["toString"]
    _hx_statics = ["withoutDirectory", "directory", "extension", "join", "normalize", "addTrailingSlash"]

    def __init__(self,path):
        self.backslash = None
        self.ext = None
        self.file = None
        self.dir = None
        path1 = path
        _hx_local_0 = len(path1)
        if (_hx_local_0 == 1):
            if (path1 == "."):
                self.dir = path
                self.file = ""
                return
        elif (_hx_local_0 == 2):
            if (path1 == ".."):
                self.dir = path
                self.file = ""
                return
        else:
            pass
        c1 = path.rfind("/", 0, len(path))
        c2 = path.rfind("\\", 0, len(path))
        if (c1 < c2):
            self.dir = HxString.substr(path,0,c2)
            path = HxString.substr(path,(c2 + 1),None)
            self.backslash = True
        elif (c2 < c1):
            self.dir = HxString.substr(path,0,c1)
            path = HxString.substr(path,(c1 + 1),None)
        else:
            self.dir = None
        cp = path.rfind(".", 0, len(path))
        if (cp != -1):
            self.ext = HxString.substr(path,(cp + 1),None)
            self.file = HxString.substr(path,0,cp)
        else:
            self.ext = None
            self.file = path

    def toString(self):
        return ((HxOverrides.stringOrNull((("" if ((self.dir is None)) else (HxOverrides.stringOrNull(self.dir) + HxOverrides.stringOrNull((("\\" if (self.backslash) else "/"))))))) + HxOverrides.stringOrNull(self.file)) + HxOverrides.stringOrNull((("" if ((self.ext is None)) else ("." + HxOverrides.stringOrNull(self.ext))))))

    @staticmethod
    def withoutDirectory(path):
        s = haxe_io_Path(path)
        s.dir = None
        return s.toString()

    @staticmethod
    def directory(path):
        s = haxe_io_Path(path)
        if (s.dir is None):
            return ""
        return s.dir

    @staticmethod
    def extension(path):
        s = haxe_io_Path(path)
        if (s.ext is None):
            return ""
        return s.ext

    @staticmethod
    def join(paths):
        def _hx_local_0(s):
            if (s is not None):
                return (s != "")
            else:
                return False
        paths1 = list(filter(_hx_local_0,paths))
        if (len(paths1) == 0):
            return ""
        path = (paths1[0] if 0 < len(paths1) else None)
        _g = 1
        _g1 = len(paths1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            path = haxe_io_Path.addTrailingSlash(path)
            path = (("null" if path is None else path) + HxOverrides.stringOrNull((paths1[i] if i >= 0 and i < len(paths1) else None)))
        return haxe_io_Path.normalize(path)

    @staticmethod
    def normalize(path):
        _this = path.split("\\")
        path = "/".join([python_Boot.toString1(x1,'') for x1 in _this])
        if (path == "/"):
            return "/"
        target = []
        _g = 0
        _g1 = path.split("/")
        while (_g < len(_g1)):
            token = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            if (((token == "..") and ((len(target) > 0))) and ((python_internal_ArrayImpl._get(target, (len(target) - 1)) != ".."))):
                if (len(target) != 0):
                    target.pop()
            elif (token != "."):
                target.append(token)
        tmp = "/".join([python_Boot.toString1(x1,'') for x1 in target])
        acc_b = python_lib_io_StringIO()
        colon = False
        slashes = False
        _g2 = 0
        _g3 = len(tmp)
        while (_g2 < _g3):
            i = _g2
            _g2 = (_g2 + 1)
            _g21 = (-1 if ((i >= len(tmp))) else ord(tmp[i]))
            _g22 = _g21
            if (_g22 == 47):
                if (not colon):
                    slashes = True
                else:
                    colon = False
                    if slashes:
                        acc_b.write("/")
                        slashes = False
                    acc_b.write("".join(map(chr,[_g21])))
            elif (_g22 == 58):
                acc_b.write(":")
                colon = True
            else:
                colon = False
                if slashes:
                    acc_b.write("/")
                    slashes = False
                acc_b.write("".join(map(chr,[_g21])))
        return acc_b.getvalue()

    @staticmethod
    def addTrailingSlash(path):
        if (len(path) == 0):
            return "/"
        c1 = path.rfind("/", 0, len(path))
        c2 = path.rfind("\\", 0, len(path))
        if (c1 < c2):
            if (c2 != ((len(path) - 1))):
                return (("null" if path is None else path) + "\\")
            else:
                return path
        elif (c1 != ((len(path) - 1))):
            return (("null" if path is None else path) + "/")
        else:
            return path

haxe_io_Path._hx_class = haxe_io_Path


class haxe_xml__Access_NodeAccess_Impl_:
    _hx_class_name = "haxe.xml._Access.NodeAccess_Impl_"
    __slots__ = ()
    _hx_statics = ["resolve"]

    @staticmethod
    def resolve(this1,name):
        x = this1.elementsNamed(name).next()
        if (x is None):
            xname = None
            if (this1.nodeType == Xml.Document):
                xname = "Document"
            else:
                if (this1.nodeType != Xml.Element):
                    raise _HxException(("Bad node type, expected Element but found " + Std.string(this1.nodeType)))
                xname = this1.nodeName
            raise _HxException(((("null" if xname is None else xname) + " is missing element ") + ("null" if name is None else name)))
        if ((x.nodeType != Xml.Document) and ((x.nodeType != Xml.Element))):
            raise _HxException(("Invalid nodeType " + Std.string(x.nodeType)))
        return x
haxe_xml__Access_NodeAccess_Impl_._hx_class = haxe_xml__Access_NodeAccess_Impl_


class haxe_xml__Access_AttribAccess_Impl_:
    _hx_class_name = "haxe.xml._Access.AttribAccess_Impl_"
    __slots__ = ()
    _hx_statics = ["resolve"]

    @staticmethod
    def resolve(this1,name):
        if (this1.nodeType == Xml.Document):
            raise _HxException(("Cannot access document attribute " + ("null" if name is None else name)))
        v = this1.get(name)
        if (v is None):
            if (this1.nodeType != Xml.Element):
                raise _HxException(("Bad node type, expected Element but found " + Std.string(this1.nodeType)))
            raise _HxException(((HxOverrides.stringOrNull(this1.nodeName) + " is missing attribute ") + ("null" if name is None else name)))
        return v
haxe_xml__Access_AttribAccess_Impl_._hx_class = haxe_xml__Access_AttribAccess_Impl_


class haxe_xml__Access_HasAttribAccess_Impl_:
    _hx_class_name = "haxe.xml._Access.HasAttribAccess_Impl_"
    __slots__ = ()
    _hx_statics = ["resolve"]

    @staticmethod
    def resolve(this1,name):
        if (this1.nodeType == Xml.Document):
            raise _HxException(("Cannot access document attribute " + ("null" if name is None else name)))
        return this1.exists(name)
haxe_xml__Access_HasAttribAccess_Impl_._hx_class = haxe_xml__Access_HasAttribAccess_Impl_


class haxe_xml__Access_HasNodeAccess_Impl_:
    _hx_class_name = "haxe.xml._Access.HasNodeAccess_Impl_"
    __slots__ = ()
    _hx_statics = ["resolve"]

    @staticmethod
    def resolve(this1,name):
        return this1.elementsNamed(name).hasNext()
haxe_xml__Access_HasNodeAccess_Impl_._hx_class = haxe_xml__Access_HasNodeAccess_Impl_


class haxe_xml__Access_NodeListAccess_Impl_:
    _hx_class_name = "haxe.xml._Access.NodeListAccess_Impl_"
    __slots__ = ()
    _hx_statics = ["resolve"]

    @staticmethod
    def resolve(this1,name):
        l = []
        x = this1.elementsNamed(name)
        while x.hasNext():
            x1 = x.next()
            if ((x1.nodeType != Xml.Document) and ((x1.nodeType != Xml.Element))):
                raise _HxException(("Invalid nodeType " + Std.string(x1.nodeType)))
            l.append(x1)
        return l
haxe_xml__Access_NodeListAccess_Impl_._hx_class = haxe_xml__Access_NodeListAccess_Impl_


class haxe_xml__Access_Access_Impl_:
    _hx_class_name = "haxe.xml._Access.Access_Impl_"
    __slots__ = ()
    _hx_statics = ["get_innerData", "get_innerHTML"]
    x = None
    name = None
    innerData = None
    innerHTML = None
    node = None
    nodes = None
    att = None
    has = None
    hasNode = None
    elements = None

    @staticmethod
    def get_innerData(this1):
        if ((this1.nodeType != Xml.Document) and ((this1.nodeType != Xml.Element))):
            raise _HxException(("Bad node type, expected Element or Document but found " + Std.string(this1.nodeType)))
        it = python_HaxeIterator(this1.children.__iter__())
        if (not it.hasNext()):
            tmp = None
            if (this1.nodeType == Xml.Document):
                tmp = "Document"
            else:
                if (this1.nodeType != Xml.Element):
                    raise _HxException(("Bad node type, expected Element but found " + Std.string(this1.nodeType)))
                tmp = this1.nodeName
            raise _HxException((("null" if tmp is None else tmp) + " does not have data"))
        v = it.next()
        if it.hasNext():
            n = it.next()
            tmp1 = None
            if ((v.nodeType == Xml.PCData) and ((n.nodeType == Xml.CData))):
                if ((v.nodeType == Xml.Document) or ((v.nodeType == Xml.Element))):
                    raise _HxException(("Bad node type, unexpected " + Std.string(v.nodeType)))
                tmp1 = (StringTools.trim(v.nodeValue) == "")
            else:
                tmp1 = False
            if tmp1:
                if (not it.hasNext()):
                    if ((n.nodeType == Xml.Document) or ((n.nodeType == Xml.Element))):
                        raise _HxException(("Bad node type, unexpected " + Std.string(n.nodeType)))
                    return n.nodeValue
                n2 = it.next()
                tmp2 = None
                if (n2.nodeType == Xml.PCData):
                    if ((n2.nodeType == Xml.Document) or ((n2.nodeType == Xml.Element))):
                        raise _HxException(("Bad node type, unexpected " + Std.string(n2.nodeType)))
                    tmp2 = (StringTools.trim(n2.nodeValue) == "")
                else:
                    tmp2 = False
                if (tmp2 and (not it.hasNext())):
                    if ((n.nodeType == Xml.Document) or ((n.nodeType == Xml.Element))):
                        raise _HxException(("Bad node type, unexpected " + Std.string(n.nodeType)))
                    return n.nodeValue
            tmp3 = None
            if (this1.nodeType == Xml.Document):
                tmp3 = "Document"
            else:
                if (this1.nodeType != Xml.Element):
                    raise _HxException(("Bad node type, expected Element but found " + Std.string(this1.nodeType)))
                tmp3 = this1.nodeName
            raise _HxException((("null" if tmp3 is None else tmp3) + " does not only have data"))
        if ((v.nodeType != Xml.PCData) and ((v.nodeType != Xml.CData))):
            tmp4 = None
            if (this1.nodeType == Xml.Document):
                tmp4 = "Document"
            else:
                if (this1.nodeType != Xml.Element):
                    raise _HxException(("Bad node type, expected Element but found " + Std.string(this1.nodeType)))
                tmp4 = this1.nodeName
            raise _HxException((("null" if tmp4 is None else tmp4) + " does not have data"))
        if ((v.nodeType == Xml.Document) or ((v.nodeType == Xml.Element))):
            raise _HxException(("Bad node type, unexpected " + Std.string(v.nodeType)))
        return v.nodeValue

    @staticmethod
    def get_innerHTML(this1):
        s_b = python_lib_io_StringIO()
        if ((this1.nodeType != Xml.Document) and ((this1.nodeType != Xml.Element))):
            raise _HxException(("Bad node type, expected Element or Document but found " + Std.string(this1.nodeType)))
        x = python_HaxeIterator(this1.children.__iter__())
        while x.hasNext():
            s_b.write(Std.string(haxe_xml_Printer.print(x.next())))
        return s_b.getvalue()
haxe_xml__Access_Access_Impl_._hx_class = haxe_xml__Access_Access_Impl_


class haxe_xml_XmlParserException:
    _hx_class_name = "haxe.xml.XmlParserException"
    __slots__ = ("message", "lineNumber", "positionAtLine", "position", "xml")
    _hx_fields = ["message", "lineNumber", "positionAtLine", "position", "xml"]
    _hx_methods = ["toString"]

    def __init__(self,message,xml,position):
        self.xml = xml
        self.message = message
        self.position = position
        self.lineNumber = 1
        self.positionAtLine = 0
        _g = 0
        while (_g < position):
            i = _g
            _g = (_g + 1)
            c = (-1 if ((i >= len(xml))) else ord(xml[i]))
            if (c == 10):
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.lineNumber
                _hx_local_0.lineNumber = (_hx_local_1 + 1)
                _hx_local_1
                self.positionAtLine = 0
            elif (c != 13):
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.positionAtLine
                _hx_local_2.positionAtLine = (_hx_local_3 + 1)
                _hx_local_3

    def toString(self):
        return ((((((HxOverrides.stringOrNull(Type.getClassName(Type.getClass(self))) + ": ") + HxOverrides.stringOrNull(self.message)) + " at line ") + Std.string(self.lineNumber)) + " char ") + Std.string(self.positionAtLine))

haxe_xml_XmlParserException._hx_class = haxe_xml_XmlParserException


class haxe_xml_Parser:
    _hx_class_name = "haxe.xml.Parser"
    __slots__ = ()
    _hx_statics = ["escapes", "parse", "doParse"]

    @staticmethod
    def parse(_hx_str,strict = False):
        if (strict is None):
            strict = False
        doc = Xml.createDocument()
        haxe_xml_Parser.doParse(_hx_str,strict,0,doc)
        return doc

    @staticmethod
    def doParse(_hx_str,strict,p = 0,parent = None):
        if (p is None):
            p = 0
        xml = None
        state = 1
        next = 1
        aname = None
        start = 0
        nsubs = 0
        nbrackets = 0
        c = (-1 if ((p >= len(_hx_str))) else ord(_hx_str[p]))
        buf = StringBuf()
        escapeNext = 1
        attrValQuote = -1
        while (c != -1):
            state1 = state
            if (state1 == 0):
                c1 = c
                if ((((c1 == 32) or ((c1 == 13))) or ((c1 == 10))) or ((c1 == 9))):
                    pass
                else:
                    state = next
                    continue
            elif (state1 == 1):
                if (c == 60):
                    state = 0
                    next = 2
                else:
                    start = p
                    state = 13
                    continue
            elif (state1 == 2):
                c2 = c
                if (c2 == 33):
                    index = (p + 1)
                    if (((-1 if ((index >= len(_hx_str))) else ord(_hx_str[index]))) == 91):
                        p = (p + 2)
                        if (HxString.substr(_hx_str,p,6).upper() != "CDATA["):
                            raise _HxException(haxe_xml_XmlParserException("Expected <![CDATA[",_hx_str,p))
                        p = (p + 5)
                        state = 17
                        start = (p + 1)
                    else:
                        tmp = None
                        index1 = (p + 1)
                        if (((-1 if ((index1 >= len(_hx_str))) else ord(_hx_str[index1]))) != 68):
                            index2 = (p + 1)
                            tmp = (((-1 if ((index2 >= len(_hx_str))) else ord(_hx_str[index2]))) == 100)
                        else:
                            tmp = True
                        if tmp:
                            if (HxString.substr(_hx_str,(p + 2),6).upper() != "OCTYPE"):
                                raise _HxException(haxe_xml_XmlParserException("Expected <!DOCTYPE",_hx_str,p))
                            p = (p + 8)
                            state = 16
                            start = (p + 1)
                        else:
                            tmp1 = None
                            index3 = (p + 1)
                            if (((-1 if ((index3 >= len(_hx_str))) else ord(_hx_str[index3]))) == 45):
                                index4 = (p + 2)
                                tmp1 = (((-1 if ((index4 >= len(_hx_str))) else ord(_hx_str[index4]))) != 45)
                            else:
                                tmp1 = True
                            if tmp1:
                                raise _HxException(haxe_xml_XmlParserException("Expected <!--",_hx_str,p))
                            else:
                                p = (p + 2)
                                state = 15
                                start = (p + 1)
                elif (c2 == 47):
                    if (parent is None):
                        raise _HxException(haxe_xml_XmlParserException("Expected node name",_hx_str,p))
                    start = (p + 1)
                    state = 0
                    next = 10
                elif (c2 == 63):
                    state = 14
                    start = p
                else:
                    state = 3
                    start = p
                    continue
            elif (state1 == 3):
                if (not (((((((((c >= 97) and ((c <= 122))) or (((c >= 65) and ((c <= 90))))) or (((c >= 48) and ((c <= 57))))) or ((c == 58))) or ((c == 46))) or ((c == 95))) or ((c == 45))))):
                    if (p == start):
                        raise _HxException(haxe_xml_XmlParserException("Expected node name",_hx_str,p))
                    xml = Xml.createElement(HxString.substr(_hx_str,start,(p - start)))
                    parent.addChild(xml)
                    nsubs = (nsubs + 1)
                    state = 0
                    next = 4
                    continue
            elif (state1 == 4):
                c3 = c
                if (c3 == 47):
                    state = 11
                elif (c3 == 62):
                    state = 9
                else:
                    state = 5
                    start = p
                    continue
            elif (state1 == 5):
                if (not (((((((((c >= 97) and ((c <= 122))) or (((c >= 65) and ((c <= 90))))) or (((c >= 48) and ((c <= 57))))) or ((c == 58))) or ((c == 46))) or ((c == 95))) or ((c == 45))))):
                    if (start == p):
                        raise _HxException(haxe_xml_XmlParserException("Expected attribute name",_hx_str,p))
                    tmp2 = HxString.substr(_hx_str,start,(p - start))
                    aname = tmp2
                    if xml.exists(tmp2):
                        raise _HxException(haxe_xml_XmlParserException((("Duplicate attribute [" + ("null" if tmp2 is None else tmp2)) + "]"),_hx_str,p))
                    state = 0
                    next = 6
                    continue
            elif (state1 == 6):
                if (c == 61):
                    state = 0
                    next = 7
                else:
                    raise _HxException(haxe_xml_XmlParserException("Expected =",_hx_str,p))
            elif (state1 == 7):
                c4 = c
                if ((c4 == 39) or ((c4 == 34))):
                    buf = StringBuf()
                    state = 8
                    start = (p + 1)
                    attrValQuote = c
                else:
                    raise _HxException(haxe_xml_XmlParserException("Expected \"",_hx_str,p))
            elif (state1 == 8):
                c5 = c
                if (c5 == 38):
                    _hx_len = (p - start)
                    s = (HxString.substr(_hx_str,start,None) if ((_hx_len is None)) else HxString.substr(_hx_str,start,_hx_len))
                    buf.b.write(s)
                    state = 18
                    escapeNext = 8
                    start = (p + 1)
                elif ((c5 == 62) or ((c5 == 60))):
                    if strict:
                        raise _HxException(haxe_xml_XmlParserException((("Invalid unescaped " + HxOverrides.stringOrNull("".join(map(chr,[c])))) + " in attribute value"),_hx_str,p))
                    elif (c == attrValQuote):
                        len1 = (p - start)
                        s1 = (HxString.substr(_hx_str,start,None) if ((len1 is None)) else HxString.substr(_hx_str,start,len1))
                        buf.b.write(s1)
                        val = buf.b.getvalue()
                        buf = StringBuf()
                        xml.set(aname,val)
                        state = 0
                        next = 4
                elif (c == attrValQuote):
                    len2 = (p - start)
                    s2 = (HxString.substr(_hx_str,start,None) if ((len2 is None)) else HxString.substr(_hx_str,start,len2))
                    buf.b.write(s2)
                    val1 = buf.b.getvalue()
                    buf = StringBuf()
                    xml.set(aname,val1)
                    state = 0
                    next = 4
            elif (state1 == 9):
                p = haxe_xml_Parser.doParse(_hx_str,strict,p,xml)
                start = p
                state = 1
            elif (state1 == 10):
                if (not (((((((((c >= 97) and ((c <= 122))) or (((c >= 65) and ((c <= 90))))) or (((c >= 48) and ((c <= 57))))) or ((c == 58))) or ((c == 46))) or ((c == 95))) or ((c == 45))))):
                    if (start == p):
                        raise _HxException(haxe_xml_XmlParserException("Expected node name",_hx_str,p))
                    v = HxString.substr(_hx_str,start,(p - start))
                    if (parent.nodeType != Xml.Element):
                        raise _HxException(("Bad node type, expected Element but found " + Std.string(parent.nodeType)))
                    if (v != parent.nodeName):
                        if (parent.nodeType != Xml.Element):
                            raise _HxException(("Bad node type, expected Element but found " + Std.string(parent.nodeType)))
                        raise _HxException(haxe_xml_XmlParserException((("Expected </" + HxOverrides.stringOrNull(parent.nodeName)) + ">"),_hx_str,p))
                    state = 0
                    next = 12
                    continue
            elif (state1 == 11):
                if (c == 62):
                    state = 1
                else:
                    raise _HxException(haxe_xml_XmlParserException("Expected >",_hx_str,p))
            elif (state1 == 12):
                if (c == 62):
                    if (nsubs == 0):
                        parent.addChild(Xml.createPCData(""))
                    return p
                else:
                    raise _HxException(haxe_xml_XmlParserException("Expected >",_hx_str,p))
            elif (state1 == 13):
                if (c == 60):
                    len3 = (p - start)
                    s3 = (HxString.substr(_hx_str,start,None) if ((len3 is None)) else HxString.substr(_hx_str,start,len3))
                    buf.b.write(s3)
                    child = Xml.createPCData(buf.b.getvalue())
                    buf = StringBuf()
                    parent.addChild(child)
                    nsubs = (nsubs + 1)
                    state = 0
                    next = 2
                elif (c == 38):
                    len4 = (p - start)
                    s4 = (HxString.substr(_hx_str,start,None) if ((len4 is None)) else HxString.substr(_hx_str,start,len4))
                    buf.b.write(s4)
                    state = 18
                    escapeNext = 13
                    start = (p + 1)
            elif (state1 == 14):
                tmp3 = None
                if (c == 63):
                    index5 = (p + 1)
                    tmp3 = (((-1 if ((index5 >= len(_hx_str))) else ord(_hx_str[index5]))) == 62)
                else:
                    tmp3 = False
                if tmp3:
                    p = (p + 1)
                    parent.addChild(Xml.createProcessingInstruction(HxString.substr(_hx_str,(start + 1),((p - start) - 2))))
                    nsubs = (nsubs + 1)
                    state = 1
            elif (state1 == 15):
                tmp4 = None
                tmp5 = None
                if (c == 45):
                    index6 = (p + 1)
                    tmp5 = (((-1 if ((index6 >= len(_hx_str))) else ord(_hx_str[index6]))) == 45)
                else:
                    tmp5 = False
                if tmp5:
                    index7 = (p + 2)
                    tmp4 = (((-1 if ((index7 >= len(_hx_str))) else ord(_hx_str[index7]))) == 62)
                else:
                    tmp4 = False
                if tmp4:
                    parent.addChild(Xml.createComment(HxString.substr(_hx_str,start,(p - start))))
                    nsubs = (nsubs + 1)
                    p = (p + 2)
                    state = 1
            elif (state1 == 16):
                if (c == 91):
                    nbrackets = (nbrackets + 1)
                elif (c == 93):
                    nbrackets = (nbrackets - 1)
                elif ((c == 62) and ((nbrackets == 0))):
                    parent.addChild(Xml.createDocType(HxString.substr(_hx_str,start,(p - start))))
                    nsubs = (nsubs + 1)
                    state = 1
            elif (state1 == 17):
                tmp6 = None
                tmp7 = None
                if (c == 93):
                    index8 = (p + 1)
                    tmp7 = (((-1 if ((index8 >= len(_hx_str))) else ord(_hx_str[index8]))) == 93)
                else:
                    tmp7 = False
                if tmp7:
                    index9 = (p + 2)
                    tmp6 = (((-1 if ((index9 >= len(_hx_str))) else ord(_hx_str[index9]))) == 62)
                else:
                    tmp6 = False
                if tmp6:
                    parent.addChild(Xml.createCData(HxString.substr(_hx_str,start,(p - start))))
                    nsubs = (nsubs + 1)
                    p = (p + 2)
                    state = 1
            elif (state1 == 18):
                if (c == 59):
                    s5 = HxString.substr(_hx_str,start,(p - start))
                    if (((-1 if ((0 >= len(s5))) else ord(s5[0]))) == 35):
                        c6 = (Std.parseInt(("0" + HxOverrides.stringOrNull(HxString.substr(s5,1,(len(s5) - 1))))) if ((((-1 if ((1 >= len(s5))) else ord(s5[1]))) == 120)) else Std.parseInt(HxString.substr(s5,1,(len(s5) - 1))))
                        s6 = "".join(map(chr,[c6]))
                        buf.b.write(s6)
                    elif (not (s5 in haxe_xml_Parser.escapes.h)):
                        if strict:
                            raise _HxException(haxe_xml_XmlParserException(("Undefined entity: " + ("null" if s5 is None else s5)),_hx_str,p))
                        s7 = Std.string((("&" + ("null" if s5 is None else s5)) + ";"))
                        buf.b.write(s7)
                    else:
                        s8 = Std.string(haxe_xml_Parser.escapes.h.get(s5,None))
                        buf.b.write(s8)
                    start = (p + 1)
                    state = escapeNext
                elif ((not (((((((((c >= 97) and ((c <= 122))) or (((c >= 65) and ((c <= 90))))) or (((c >= 48) and ((c <= 57))))) or ((c == 58))) or ((c == 46))) or ((c == 95))) or ((c == 45))))) and ((c != 35))):
                    if strict:
                        raise _HxException(haxe_xml_XmlParserException(("Invalid character in entity: " + HxOverrides.stringOrNull("".join(map(chr,[c])))),_hx_str,p))
                    s9 = "".join(map(chr,[38]))
                    buf.b.write(s9)
                    len5 = (p - start)
                    s10 = (HxString.substr(_hx_str,start,None) if ((len5 is None)) else HxString.substr(_hx_str,start,len5))
                    buf.b.write(s10)
                    def _hx_local_16():
                        nonlocal p
                        _hx_local_15 = p
                        p = (p - 1)
                        return _hx_local_15
                    start = _hx_local_16()
                    state = escapeNext
            else:
                pass
            p = (p + 1)
            index10 = p
            c = (-1 if ((index10 >= len(_hx_str))) else ord(_hx_str[index10]))
        if (state == 1):
            start = p
            state = 13
        if (state == 13):
            if ((p != start) or ((nsubs == 0))):
                len6 = (p - start)
                s11 = (HxString.substr(_hx_str,start,None) if ((len6 is None)) else HxString.substr(_hx_str,start,len6))
                buf.b.write(s11)
                parent.addChild(Xml.createPCData(buf.b.getvalue()))
            return p
        if (((not strict) and ((state == 18))) and ((escapeNext == 13))):
            s12 = "".join(map(chr,[38]))
            buf.b.write(s12)
            len7 = (p - start)
            s13 = (HxString.substr(_hx_str,start,None) if ((len7 is None)) else HxString.substr(_hx_str,start,len7))
            buf.b.write(s13)
            parent.addChild(Xml.createPCData(buf.b.getvalue()))
            return p
        raise _HxException(haxe_xml_XmlParserException("Unexpected end",_hx_str,p))
haxe_xml_Parser._hx_class = haxe_xml_Parser


class haxe_xml_Printer:
    _hx_class_name = "haxe.xml.Printer"
    __slots__ = ("output", "pretty")
    _hx_fields = ["output", "pretty"]
    _hx_methods = ["writeNode", "hasChildren"]
    _hx_statics = ["print"]

    def __init__(self,pretty):
        self.output = StringBuf()
        self.pretty = pretty

    def writeNode(self,value,tabs):
        _g = value.nodeType
        if (_g == 0):
            _this = self.output
            s = Std.string((("null" if tabs is None else tabs) + "<"))
            _this.b.write(s)
            if (value.nodeType != Xml.Element):
                raise _HxException(("Bad node type, expected Element but found " + Std.string(value.nodeType)))
            _this1 = self.output
            s1 = Std.string(value.nodeName)
            _this1.b.write(s1)
            attribute = value.attributes()
            while attribute.hasNext():
                attribute1 = attribute.next()
                _this2 = self.output
                s2 = Std.string(((" " + ("null" if attribute1 is None else attribute1)) + "=\""))
                _this2.b.write(s2)
                input = StringTools.htmlEscape(value.get(attribute1),True)
                _this3 = self.output
                s3 = Std.string(input)
                _this3.b.write(s3)
                self.output.b.write("\"")
            if self.hasChildren(value):
                self.output.b.write(">")
                if self.pretty:
                    self.output.b.write("\n")
                if ((value.nodeType != Xml.Document) and ((value.nodeType != Xml.Element))):
                    raise _HxException(("Bad node type, expected Element or Document but found " + Std.string(value.nodeType)))
                child = python_HaxeIterator(value.children.__iter__())
                while child.hasNext():
                    self.writeNode(child.next(),((("null" if tabs is None else tabs) + "\t") if (self.pretty) else tabs))
                _this4 = self.output
                s4 = Std.string((("null" if tabs is None else tabs) + "</"))
                _this4.b.write(s4)
                if (value.nodeType != Xml.Element):
                    raise _HxException(("Bad node type, expected Element but found " + Std.string(value.nodeType)))
                _this5 = self.output
                s5 = Std.string(value.nodeName)
                _this5.b.write(s5)
                self.output.b.write(">")
                if self.pretty:
                    self.output.b.write("\n")
            else:
                self.output.b.write("/>")
                if self.pretty:
                    self.output.b.write("\n")
        elif (_g == 1):
            if ((value.nodeType == Xml.Document) or ((value.nodeType == Xml.Element))):
                raise _HxException(("Bad node type, unexpected " + Std.string(value.nodeType)))
            nodeValue = value.nodeValue
            if (len(nodeValue) != 0):
                input1 = (("null" if tabs is None else tabs) + HxOverrides.stringOrNull(StringTools.htmlEscape(nodeValue)))
                _this6 = self.output
                s6 = Std.string(input1)
                _this6.b.write(s6)
                if self.pretty:
                    self.output.b.write("\n")
        elif (_g == 2):
            _this7 = self.output
            s7 = Std.string((("null" if tabs is None else tabs) + "<![CDATA["))
            _this7.b.write(s7)
            if ((value.nodeType == Xml.Document) or ((value.nodeType == Xml.Element))):
                raise _HxException(("Bad node type, unexpected " + Std.string(value.nodeType)))
            _this8 = self.output
            s8 = Std.string(value.nodeValue)
            _this8.b.write(s8)
            self.output.b.write("]]>")
            if self.pretty:
                self.output.b.write("\n")
        elif (_g == 3):
            if ((value.nodeType == Xml.Document) or ((value.nodeType == Xml.Element))):
                raise _HxException(("Bad node type, unexpected " + Std.string(value.nodeType)))
            commentContent = value.nodeValue
            commentContent = EReg("[\n\r\t]+","g").replace(commentContent,"")
            commentContent = (("<!--" + ("null" if commentContent is None else commentContent)) + "-->")
            _this9 = self.output
            s9 = Std.string(tabs)
            _this9.b.write(s9)
            input2 = StringTools.trim(commentContent)
            _this10 = self.output
            s10 = Std.string(input2)
            _this10.b.write(s10)
            if self.pretty:
                self.output.b.write("\n")
        elif (_g == 4):
            if ((value.nodeType == Xml.Document) or ((value.nodeType == Xml.Element))):
                raise _HxException(("Bad node type, unexpected " + Std.string(value.nodeType)))
            _this11 = self.output
            s11 = Std.string((("<!DOCTYPE " + HxOverrides.stringOrNull(value.nodeValue)) + ">"))
            _this11.b.write(s11)
            if self.pretty:
                self.output.b.write("\n")
        elif (_g == 5):
            if ((value.nodeType == Xml.Document) or ((value.nodeType == Xml.Element))):
                raise _HxException(("Bad node type, unexpected " + Std.string(value.nodeType)))
            _this12 = self.output
            s12 = Std.string((("<?" + HxOverrides.stringOrNull(value.nodeValue)) + "?>"))
            _this12.b.write(s12)
            if self.pretty:
                self.output.b.write("\n")
        elif (_g == 6):
            if ((value.nodeType != Xml.Document) and ((value.nodeType != Xml.Element))):
                raise _HxException(("Bad node type, expected Element or Document but found " + Std.string(value.nodeType)))
            child1 = python_HaxeIterator(value.children.__iter__())
            while child1.hasNext():
                self.writeNode(child1.next(),tabs)
        else:
            pass

    def hasChildren(self,value):
        if ((value.nodeType != Xml.Document) and ((value.nodeType != Xml.Element))):
            raise _HxException(("Bad node type, expected Element or Document but found " + Std.string(value.nodeType)))
        child = python_HaxeIterator(value.children.__iter__())
        while child.hasNext():
            child1 = child.next()
            _g = child1.nodeType
            if ((_g == 1) or ((_g == 0))):
                return True
            elif ((_g == 3) or ((_g == 2))):
                if ((child1.nodeType == Xml.Document) or ((child1.nodeType == Xml.Element))):
                    raise _HxException(("Bad node type, unexpected " + Std.string(child1.nodeType)))
                if (len(StringTools.ltrim(child1.nodeValue)) != 0):
                    return True
            else:
                pass
        return False

    @staticmethod
    def print(xml,pretty = False):
        if (pretty is None):
            pretty = False
        printer = haxe_xml_Printer(pretty)
        printer.writeNode(xml,"")
        return printer.output.b.getvalue()

haxe_xml_Printer._hx_class = haxe_xml_Printer


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g3 = 0
                    _g12 = l1
                    while (_g3 < _g12):
                        i1 = _g3
                        _g3 = (_g3 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                return list(o._hx_fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        if isinstance(o,str):
            _hx_local_0 = len(field)
            if (_hx_local_0 == 10):
                if (field == "charCodeAt"):
                    return python_internal_MethodClosure(o,HxString.charCodeAt)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 11):
                if (field == "lastIndexOf"):
                    return python_internal_MethodClosure(o,HxString.lastIndexOf)
                elif (field == "toLowerCase"):
                    return python_internal_MethodClosure(o,HxString.toLowerCase)
                elif (field == "toUpperCase"):
                    return python_internal_MethodClosure(o,HxString.toUpperCase)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 9):
                if (field == "substring"):
                    return python_internal_MethodClosure(o,HxString.substring)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 5):
                if (field == "split"):
                    return python_internal_MethodClosure(o,HxString.split)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 7):
                if (field == "indexOf"):
                    return python_internal_MethodClosure(o,HxString.indexOf)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 8):
                if (field == "toString"):
                    return python_internal_MethodClosure(o,HxString.toString)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 6):
                if (field == "charAt"):
                    return python_internal_MethodClosure(o,HxString.charAt)
                elif (field == "length"):
                    return len(o)
                elif (field == "substr"):
                    return python_internal_MethodClosure(o,HxString.substr)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            else:
                field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field1) if (hasattr(o,field1)) else None)
        elif isinstance(o,list):
            _hx_local_1 = len(field)
            if (_hx_local_1 == 11):
                if (field == "lastIndexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.lastIndexOf)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_1 == 4):
                if (field == "copy"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.copy)
                elif (field == "join"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.join)
                elif (field == "push"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.push)
                elif (field == "sort"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.sort)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_1 == 5):
                if (field == "shift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.shift)
                elif (field == "slice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.slice)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_1 == 7):
                if (field == "indexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.indexOf)
                elif (field == "reverse"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.reverse)
                elif (field == "unshift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.unshift)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_1 == 3):
                if (field == "map"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.map)
                elif (field == "pop"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.pop)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_1 == 8):
                if (field == "iterator"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.iterator)
                elif (field == "toString"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.toString)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_1 == 6):
                if (field == "concat"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.concat)
                elif (field == "filter"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.filter)
                elif (field == "insert"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.insert)
                elif (field == "length"):
                    return len(o)
                elif (field == "remove"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.remove)
                elif (field == "splice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.splice)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            else:
                field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field2) if (hasattr(o,field2)) else None)
        else:
            field3 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
            return (getattr(o,field3) if (hasattr(o,field3)) else None)

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name
python_Boot._hx_class = python_Boot


class python__KwArgs_KwArgs_Impl_:
    _hx_class_name = "python._KwArgs.KwArgs_Impl_"
    __slots__ = ()
    _hx_statics = ["fromT"]

    @staticmethod
    def fromT(d):
        return python_Lib.anonAsDict(d)
python__KwArgs_KwArgs_Impl_._hx_class = python__KwArgs_KwArgs_Impl_


class python_Lib:
    _hx_class_name = "python.Lib"
    __slots__ = ()
    _hx_statics = ["printString", "anonToDict", "anonAsDict"]

    @staticmethod
    def printString(_hx_str):
        python_lib_Sys.stdout.buffer.write(_hx_str.encode("utf-8", "strict"))
        python_lib_Sys.stdout.flush()

    @staticmethod
    def anonToDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__.copy()
        else:
            return None

    @staticmethod
    def anonAsDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__
        else:
            return None
python_Lib._hx_class = python_Lib


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "copy", "iterator", "indexOf", "lastIndexOf", "join", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get", "_set"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def copy(x):
        return list(x)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g = l
        while (_g < _hx_len):
            i = _g
            _g = (_g + 1)
            if HxOverrides.eq(a[i],x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if HxOverrides.eq(a[l],x):
                return l
        return -1

    @staticmethod
    def join(x,sep):
        return sep.join([python_Boot.toString1(x1,'') for x1 in x])

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None

    @staticmethod
    def _set(x,idx,v):
        l = len(x)
        while (l < idx):
            x.append(None)
            l = (l + 1)
        if (l == idx):
            x.append(v)
        else:
            x[idx] = v
        return v
python_internal_ArrayImpl._hx_class = python_internal_ArrayImpl


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = Exception


    def __init__(self,val):
        self.val = None
        super().__init__(str(val))
        self.val = val

_HxException._hx_class = _HxException


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "length", "rshift", "mapKwArgs"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def length(x):
        if isinstance(x,str):
            return len(x)
        elif isinstance(x,list):
            return len(x)
        return x.length

    @staticmethod
    def rshift(val,n):
        return ((val % 0x100000000) >> n)

    @staticmethod
    def mapKwArgs(a,v):
        a1 = _hx_AnonObject(python_Lib.anonToDict(a))
        k = python_HaxeIterator(iter(v.keys()))
        while k.hasNext():
            k1 = k.next()
            val = v.get(k1)
            if hasattr(a1,k1):
                setattr(a1,val,getattr(a1,k1))
                delattr(a1,k1)
        return a1
HxOverrides._hx_class = HxOverrides


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)

python_internal_MethodClosure._hx_class = python_internal_MethodClosure


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]
HxString._hx_class = HxString


class python_io_NativeInput(haxe_io_Input):
    _hx_class_name = "python.io.NativeInput"
    __slots__ = ("stream", "wasEof")
    _hx_fields = ["stream", "wasEof"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = haxe_io_Input


    def __init__(self,s):
        self.wasEof = None
        self.stream = s
        self.set_bigEndian(False)
        self.wasEof = False
        if (not self.stream.readable()):
            raise _HxException("Write-only stream")

python_io_NativeInput._hx_class = python_io_NativeInput


class python_io_IInput:
    _hx_class_name = "python.io.IInput"
    __slots__ = ()
    _hx_methods = ["set_bigEndian"]
python_io_IInput._hx_class = python_io_IInput


class python_io_IFileInput:
    _hx_class_name = "python.io.IFileInput"
    __slots__ = ()
python_io_IFileInput._hx_class = python_io_IFileInput


class python_io_NativeOutput(haxe_io_Output):
    _hx_class_name = "python.io.NativeOutput"
    __slots__ = ("stream",)
    _hx_fields = ["stream"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self,stream):
        self.stream = None
        self.set_bigEndian(False)
        self.stream = stream
        if (not stream.writable()):
            raise _HxException("Read only stream")

python_io_NativeOutput._hx_class = python_io_NativeOutput


class python_io_IOutput:
    _hx_class_name = "python.io.IOutput"
    __slots__ = ()
    _hx_methods = ["set_bigEndian"]
python_io_IOutput._hx_class = python_io_IOutput


class python_io_IFileOutput:
    _hx_class_name = "python.io.IFileOutput"
    __slots__ = ()
python_io_IFileOutput._hx_class = python_io_IFileOutput


class python_io_NativeTextInput(python_io_NativeInput):
    _hx_class_name = "python.io.NativeTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeInput


    def __init__(self,stream):
        super().__init__(stream)
python_io_NativeTextInput._hx_class = python_io_NativeTextInput


class python_io_FileTextInput(python_io_NativeTextInput):
    _hx_class_name = "python.io.FileTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeTextInput


    def __init__(self,stream):
        super().__init__(stream)
python_io_FileTextInput._hx_class = python_io_FileTextInput


class python_io_NativeTextOutput(python_io_NativeOutput):
    _hx_class_name = "python.io.NativeTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeOutput


    def __init__(self,stream):
        super().__init__(stream)
        if (not stream.writable()):
            raise _HxException("Read only stream")
python_io_NativeTextOutput._hx_class = python_io_NativeTextOutput


class python_io_FileTextOutput(python_io_NativeTextOutput):
    _hx_class_name = "python.io.FileTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeTextOutput


    def __init__(self,stream):
        super().__init__(stream)
python_io_FileTextOutput._hx_class = python_io_FileTextOutput


class python_io_IoTools:
    _hx_class_name = "python.io.IoTools"
    __slots__ = ()
    _hx_statics = ["createFileInputFromText", "createFileOutputFromText"]

    @staticmethod
    def createFileInputFromText(t):
        return sys_io_FileInput(python_io_FileTextInput(t))

    @staticmethod
    def createFileOutputFromText(t):
        return sys_io_FileOutput(python_io_FileTextOutput(t))
python_io_IoTools._hx_class = python_io_IoTools


class sys_io_File:
    _hx_class_name = "sys.io.File"
    __slots__ = ()
    _hx_statics = ["getContent"]

    @staticmethod
    def getContent(path):
        f = python_lib_Builtins.open(path,"r",-1,"utf-8",None,"")
        content = f.read(-1)
        f.close()
        return content
sys_io_File._hx_class = sys_io_File


class sys_io_FileInput(haxe_io_Input):
    _hx_class_name = "sys.io.FileInput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian"]
    _hx_statics = []
    _hx_super = haxe_io_Input


    def __init__(self,impl):
        self.impl = impl

    def set_bigEndian(self,b):
        return self.impl.set_bigEndian(b)

sys_io_FileInput._hx_class = sys_io_FileInput


class sys_io_FileOutput(haxe_io_Output):
    _hx_class_name = "sys.io.FileOutput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian"]
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self,impl):
        self.impl = impl

    def set_bigEndian(self,b):
        return self.impl.set_bigEndian(b)

sys_io_FileOutput._hx_class = sys_io_FileOutput

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

HaxePlugin.id = "haxe_minimal"
HaxeProject.haxeServerStdioHandle = None
HaxeProject.haxeServerSocketHandle = None
HaxeView.HAXE_STATUS = "haxe_status"
def _hx_init_Sys_environ():
    def _hx_local_0():
        Sys.environ = haxe_ds_StringMap()
        env = python_lib_Os.environ
        key = python_HaxeIterator(iter(env.keys()))
        while key.hasNext():
            key1 = key.next()
            _this = Sys.environ
            value = env.get(key1,None)
            _this.h[key1] = value
        return Sys.environ
    return _hx_local_0()
Sys.environ = _hx_init_Sys_environ()
Sys._programPath = sys_FileSystem.fullPath(python_lib_Inspect.getsourcefile(Sys))
Xml.Element = 0
Xml.PCData = 1
Xml.CData = 2
Xml.Comment = 3
Xml.DocType = 4
Xml.ProcessingInstruction = 5
Xml.Document = 6
def _hx_init_haxe_xml_Parser_escapes():
    def _hx_local_0():
        h = haxe_ds_StringMap()
        h.h["lt"] = "<"
        h.h["gt"] = ">"
        h.h["amp"] = "&"
        h.h["quot"] = "\""
        h.h["apos"] = "'"
        return h
    return _hx_local_0()
haxe_xml_Parser.escapes = _hx_init_haxe_xml_Parser_escapes()
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

HaxePlugin.main()